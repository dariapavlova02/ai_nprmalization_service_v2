#!/usr/bin/env python3
"""Fix diminutives dictionary by adding case forms."""

import json
from typing import Dict, Set

def generate_case_forms(name: str) -> Set[str]:
    """Generate case forms for Russian diminutive names."""

    forms = {name}  # nominative

    if name.endswith('–∞'):
        base = name[:-1]
        forms.update({
            base + '–∏',    # genitive: –î–∞—à–∞ ‚Üí –î–∞—à–∏
            base + '–µ',    # dative: –î–∞—à–∞ ‚Üí –î–∞—à–µ
            base + '—É',    # accusative: –î–∞—à–∞ ‚Üí –î–∞—à—É
            base + '–æ–π',   # instrumental: –î–∞—à–∞ ‚Üí –î–∞—à–æ–π
            base + '–µ',    # prepositional: –î–∞—à–∞ ‚Üí –î–∞—à–µ
        })
    elif name.endswith('—è'):
        base = name[:-1]
        forms.update({
            base + '–∏',    # genitive: –¢–∞–Ω—è ‚Üí –¢–∞–Ω–∏
            base + '–µ',    # dative: –¢–∞–Ω—è ‚Üí –¢–∞–Ω–µ
            base + '—é',    # accusative: –¢–∞–Ω—è ‚Üí –¢–∞–Ω—é
            base + '–µ–π',   # instrumental: –¢–∞–Ω—è ‚Üí –¢–∞–Ω–µ–π
            base + '–µ',    # prepositional: –¢–∞–Ω—è ‚Üí –¢–∞–Ω–µ
        })
    elif name.endswith('—å'):
        base = name[:-1]
        forms.update({
            base + '–∏',    # genitive: –ò–≥–æ—Ä—å ‚Üí –ò–≥–æ—Ä–∏ (—Ä–µ–¥–∫–æ, –Ω–æ –±—ã–≤–∞–µ—Ç)
            base + '—é',    # accusative: –ò–≥–æ—Ä—å ‚Üí –ò–≥–æ—Ä—é
            base + '–µ–º',   # instrumental: –ò–≥–æ—Ä—å ‚Üí –ò–≥–æ—Ä–µ–º
            base + '–µ',    # prepositional: –ò–≥–æ—Ä—å ‚Üí –ò–≥–æ—Ä–µ
        })
    else:
        # –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—ã–π
        forms.update({
            name + '–∞',    # genitive: –ö–æ–ª—è ‚Üí –ö–æ–ª–∏
            name + '–µ',    # dative: –ö–æ–ª—è ‚Üí –ö–æ–ª–µ
            name + '—É',    # accusative: –ö–æ–ª—è ‚Üí –ö–æ–ª—é
            name + '–æ–π',   # instrumental: –ö–æ–ª—è ‚Üí –ö–æ–ª–µ–π
            name + '–µ',    # prepositional: –ö–æ–ª—è ‚Üí –ö–æ–ª–µ
        })

    return forms

def add_case_forms_to_diminutives():
    """Add case forms to diminutives dictionary."""

    print("üìù Adding case forms to diminutives dictionary...")

    # Load existing dictionary
    with open("data/diminutives_ru.json", "r", encoding="utf-8") as f:
        diminutives = json.load(f)

    original_count = len(diminutives)
    print(f"Original entries: {original_count}")

    # Get base diminutives (only those that map to different full names)
    base_diminutives = {}
    for dim, full in diminutives.items():
        if dim != full:  # Only real diminutives, not full names
            base_diminutives[dim] = full

    print(f"Base diminutives: {len(base_diminutives)}")

    # Generate case forms for each diminutive
    added_count = 0
    for diminutive, full_name in base_diminutives.items():
        case_forms = generate_case_forms(diminutive)

        for case_form in case_forms:
            if case_form != diminutive and case_form not in diminutives:
                diminutives[case_form] = full_name
                added_count += 1

    print(f"Added {added_count} case forms")
    print(f"Total entries: {len(diminutives)}")

    # Save updated dictionary
    with open("data/diminutives_ru.json", "w", encoding="utf-8") as f:
        json.dump(diminutives, f, ensure_ascii=False, indent=2, sort_keys=True)

    print("‚úÖ Updated diminutives dictionary saved")

    # Test our specific cases
    test_cases = ["–¥–∞—à–∏", "–¥–∞—à—É", "–¥–∞—à–µ", "–¥–∞—à–æ–π"]
    print(f"\nüß™ Testing specific cases:")
    for case in test_cases:
        if case in diminutives:
            print(f"‚úÖ {case} ‚Üí {diminutives[case]}")
        else:
            print(f"‚ùå {case} not found")

if __name__ == "__main__":
    add_case_forms_to_diminutives()