#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
"""

import subprocess
import sys
import time
from pathlib import Path


def run_command(cmd, description):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
    print()
    
    start_time = time.time()
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        end_time = time.time()
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f}—Å")
        print(f"üìä –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        
        if result.stdout:
            print(f"\nüì§ STDOUT:")
            print(result.stdout)
        
        if result.stderr:
            print(f"\n‚ùå STDERR:")
            print(result.stderr)
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("tests").exists():
        print("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ ai-service")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pytest
    if not run_command("pytest --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ pytest"):
        print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest")
        sys.exit(1)
    
    # 1. Unit —Ç–µ—Å—Ç—ã
    print("\n" + "="*60)
    print("üìã 1. UNIT –¢–ï–°–¢–´")
    print("="*60)
    
    unit_tests = [
        "tests/unit/test_search_contracts.py",
        "tests/unit/test_search_integration.py", 
        "tests/unit/test_decision_engine_with_search.py"
    ]
    
    for test_file in unit_tests:
        if Path(test_file).exists():
            success = run_command(
                f"pytest {test_file} -v --tb=short",
                f"–ó–∞–ø—É—Å–∫ {test_file}"
            )
            if not success:
                print(f"‚ùå –¢–µ—Å—Ç {test_file} –Ω–µ –ø—Ä–æ—à–µ–ª")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    print("\n" + "="*60)
    print("üê≥ 2. –ü–†–û–í–ï–†–ö–ê DOCKER")
    print("="*60)
    
    docker_available = run_command("docker --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker")
    if not docker_available:
        print("‚ö†Ô∏è  Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. Integration —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Elasticsearch
        es_running = run_command(
            "curl -f http://localhost:9200/_cluster/health",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ Elasticsearch"
        )
        
        if not es_running:
            print("‚ö†Ô∏è  Elasticsearch –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print("   docker-compose -f docker-compose.test.yml up -d")
        else:
            # 3. Integration —Ç–µ—Å—Ç—ã
            print("\n" + "="*60)
            print("üîó 3. INTEGRATION –¢–ï–°–¢–´")
            print("="*60)
            
            integration_tests = [
                "tests/integration/test_elasticsearch_search.py"
            ]
            
            for test_file in integration_tests:
                if Path(test_file).exists():
                    success = run_command(
                        f"pytest {test_file} -v --tb=short",
                        f"–ó–∞–ø—É—Å–∫ {test_file}"
                    )
                    if not success:
                        print(f"‚ùå –¢–µ—Å—Ç {test_file} –Ω–µ –ø—Ä–æ—à–µ–ª")
                else:
                    print(f"‚ö†Ô∏è  –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 4. Performance —Ç–µ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Docker –¥–æ—Å—Ç—É–ø–µ–Ω)
    if docker_available and es_running:
        print("\n" + "="*60)
        print("‚ö° 4. PERFORMANCE –¢–ï–°–¢–´")
        print("="*60)
        
        performance_tests = [
            "tests/performance/test_search_performance.py"
        ]
        
        for test_file in performance_tests:
            if Path(test_file).exists():
                success = run_command(
                    f"pytest {test_file} -v --tb=short",
                    f"–ó–∞–ø—É—Å–∫ {test_file}"
                )
                if not success:
                    print(f"‚ùå –¢–µ—Å—Ç {test_file} –Ω–µ –ø—Ä–æ—à–µ–ª")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    print("‚úÖ Unit —Ç–µ—Å—Ç—ã: –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    if docker_available:
        print("‚úÖ Docker: –î–æ—Å—Ç—É–ø–µ–Ω")
        if es_running:
            print("‚úÖ Elasticsearch: –ó–∞–ø—É—â–µ–Ω")
            print("‚úÖ Integration —Ç–µ—Å—Ç—ã: –î–æ—Å—Ç—É–ø–Ω—ã")
            print("‚úÖ Performance —Ç–µ—Å—Ç—ã: –î–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print("‚ö†Ô∏è  Elasticsearch: –ù–µ –∑–∞–ø—É—â–µ–Ω")
            print("‚ö†Ô∏è  Integration —Ç–µ—Å—Ç—ã: –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            print("‚ö†Ô∏è  Performance —Ç–µ—Å—Ç—ã: –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    else:
        print("‚ö†Ô∏è  Docker: –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("‚ö†Ô∏è  Integration —Ç–µ—Å—Ç—ã: –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        print("‚ö†Ô∏è  Performance —Ç–µ—Å—Ç—ã: –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("  make -f Makefile.test test-with-docker")


if __name__ == "__main__":
    main()
