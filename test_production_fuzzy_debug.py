#!/usr/bin/env python3

"""
–û—Ç–ª–∞–¥–∫–∞ fuzzy search –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_production_fuzzy_debug():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ fuzzy search –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ."""
    print("üîç –û–¢–õ–ê–î–ö–ê PRODUCTION FUZZY SEARCH")
    print("=" * 60)

    try:
        from ai_service.layers.search.sanctions_data_loader import SanctionsDataLoader

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–µ—à
        loader = SanctionsDataLoader()
        await loader.clear_cache()
        print("üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º dataset
        dataset = await loader.load_dataset(force_reload=True)
        print(f"üìä Dataset –∑–∞–≥—Ä—É–∂–µ–Ω: {dataset.total_entries} entries")
        print(f"   Sources: {dataset.sources}")

        # –ü–æ–ª—É—á–∞–µ–º fuzzy candidates
        fuzzy_candidates = await loader.get_fuzzy_candidates()
        print(f"üîç Fuzzy candidates: {len(fuzzy_candidates)}")

        # –ü–æ–∏—Å–∫ –ö–æ–≤—Ä–∏–∫–æ–≤
        kovrykov_variants = [
            "–∫–æ–≤—Ä–∏–∫–æ–≤", "kovrykov", "–∫–æ–≤—Ä–∏–∫–æ", "kovryko",
            "—Ä–æ–º–∞–Ω", "roman", "–≤–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á", "valeriyovych"
        ]

        matches = []
        for variant in kovrykov_variants:
            variant_matches = [c for c in fuzzy_candidates if variant.lower() in c.lower()]
            if variant_matches:
                matches.extend(variant_matches)
                print(f"   '{variant}' matches: {len(variant_matches)}")
                for match in variant_matches[:3]:
                    print(f"     - {match}")

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_matches = list(set(matches))
        print(f"\nüìã –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {len(unique_matches)}")
        for match in unique_matches:
            print(f"  - {match}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fuzzy –Ω–∞–ø—Ä—è–º—É—é
        print(f"\nüß™ –¢–µ—Å—Ç fuzzy –∞–ª–≥–æ—Ä–∏—Ç–º–∞:")
        from ai_service.layers.search.fuzzy_search_service import FuzzySearchService, FuzzyConfig

        fuzzy_config = FuzzyConfig(
            min_score_threshold=0.5,
            high_confidence_threshold=0.80,
            partial_match_threshold=0.70,
            enable_name_fuzzy=True,
            name_boost_factor=1.2
        )

        fuzzy_service = FuzzySearchService(fuzzy_config)
        query = "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
        if unique_matches:
            print(f"   Testing with {len(unique_matches)} relevant candidates...")
            results = await fuzzy_service.search_async(
                query=query,
                candidates=unique_matches
            )
            print(f"   Results: {len(results)}")
            for result in results:
                print(f"     - {result.matched_text} (score: {result.score:.3f})")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å sample –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
        test_candidates = [
            "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á",
            "–†–æ–º–∞–Ω –ö–æ–≤—Ä–∏–∫–æ–≤",
            "–ö–æ–≤—Ä–∏–∫ –†–æ–º–∞–Ω",
            "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω"
        ] + unique_matches[:5]

        print(f"\n   Testing with sample + found candidates ({len(test_candidates)})...")
        results = await fuzzy_service.search_async(
            query=query,
            candidates=test_candidates
        )
        print(f"   Results: {len(results)}")
        for result in results:
            print(f"     - {result.matched_text} (score: {result.score:.3f})")

        return len(results) > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ PRODUCTION FUZZY DEBUG")
    print("=" * 50)

    success = await test_production_fuzzy_debug()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: Fuzzy –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—à–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
    else:
        print("‚ùå FAILURE: Fuzzy –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)