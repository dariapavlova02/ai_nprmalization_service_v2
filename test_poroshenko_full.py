#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ
"""
import sys
sys.path.insert(0, 'src')

def test_full_poroshenko_process():
    print("üöÄ –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–¶–ï–°–°–ê: –ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ")
    print("=" * 60)

    # 1. SmartFilter
    print("\n1Ô∏è‚É£ SmartFilter - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
    print("-" * 40)

    try:
        from ai_service.layers.smart_filter.smart_filter_service import SmartFilterService

        smart_filter = SmartFilterService(
            language_service=None,
            signal_service=None,
            enable_terrorism_detection=True,
            enable_aho_corasick=True
        )

        test_text = "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"
        filter_result = smart_filter.should_process_text(test_text)

        print(f"–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: '{test_text}'")
        print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'–û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨' if filter_result.should_process else '–ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨'}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {filter_result.confidence:.3f}")
        print(f"AC —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {filter_result.signal_details.get('aho_corasick_matches', {}).get('total_matches', 0)}")

        if not filter_result.should_process:
            print("‚ùå SmartFilter –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É!")
            return False

        print("‚úÖ SmartFilter —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SmartFilter: {e}")
        return False

    # 2. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n2Ô∏è‚É£ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏")
    print("-" * 40)

    try:
        from ai_service.layers.normalization.normalization_service import NormalizationService

        norm_service = NormalizationService()
        norm_result = norm_service.normalize(
            text=test_text,
            language="uk",
            remove_stop_words=True,
            preserve_names=True,
            enable_advanced_features=True
        )

        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π: '{test_text}'")
        print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: '{norm_result.normalized}'")
        print(f"–¢–æ–∫–µ–Ω—ã: {norm_result.tokens}")
        print(f"–Ø–∑—ã–∫: {norm_result.language}")

        if not norm_result.success:
            print("‚ùå –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
            return False

        print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

    # 3. –ü–æ–∏—Å–∫
    print("\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤ —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö")
    print("-" * 40)

    try:
        # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ ES
        import requests
        from requests.auth import HTTPBasicAuth

        ES_HOST = "95.217.84.234"
        ES_PORT = 9200
        ES_USER = "elastic"
        ES_PASSWORD = "AiServiceElastic2024!"
        ES_INDEX = "ai_service_ac_patterns"

        url = f"http://{ES_HOST}:{ES_PORT}/{ES_INDEX}/_search"
        auth = HTTPBasicAuth(ES_USER, ES_PASSWORD)

        # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        search_query = {
            "query": {
                "bool": {
                    "should": [
                        {
                            "wildcard": {
                                "pattern": {
                                    "value": "*–ø–æ—Ä–æ—à–µ–Ω–∫–æ*",
                                    "case_insensitive": True
                                }
                            }
                        },
                        {
                            "match": {
                                "pattern": {
                                    "query": "–ø–æ—Ä–æ—à–µ–Ω–∫–æ –ø–µ—Ç—Ä–æ",
                                    "fuzziness": "AUTO"
                                }
                            }
                        }
                    ],
                    "minimum_should_match": 1
                }
            },
            "size": 5
        }

        response = requests.post(url, json=search_query, auth=auth)
        if response.status_code == 200:
            result = response.json()
            total_hits = result["hits"]["total"]["value"]

            print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {total_hits}")

            if total_hits > 0:
                print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
                for hit in result["hits"]["hits"]:
                    pattern = hit["_source"]
                    print(f"  üìç '{pattern['pattern']}' (ID: {pattern['entity_id']}, tier: {pattern['tier']})")

                print("‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω - –Ω–∞–π–¥–µ–Ω—ã —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏!")
            else:
                print("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False

    # 4. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    print("\nüéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    print("‚úÖ SmartFilter: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
    print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –∏–º—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    print("‚úÖ –ü–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω—ã —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
    print("\nüö® –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ –ù–ê–ô–î–ï–ù –≤ —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö!")

    return True

if __name__ == "__main__":
    success = test_full_poroshenko_process()
    sys.exit(0 if success else 1)