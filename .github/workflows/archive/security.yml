name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  security_scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-dev
          poetry install

      - name: Run Bandit Security Linter
        run: |
          poetry add --group dev bandit[toml]
          poetry run bandit -r src/ -f json -o artifacts/bandit-report.json || true
          poetry run bandit -r src/ -f txt
        continue-on-error: true

      - name: Run Safety (dependency vulnerability check)
        run: |
          poetry add --group dev safety
          poetry run safety check --json > artifacts/safety-report.json || true
          poetry run safety check
        continue-on-error: true

      - name: Run Semgrep SAST
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > artifacts/security-summary.md
          echo "" >> artifacts/security-summary.md
          echo "## Bandit Results" >> artifacts/security-summary.md
          if [ -f artifacts/bandit-report.json ]; then
            echo "Bandit scan completed. Check bandit-report.json for details." >> artifacts/security-summary.md
          else
            echo "Bandit scan failed or no issues found." >> artifacts/security-summary.md
          fi
          echo "" >> artifacts/security-summary.md
          echo "## Safety Results" >> artifacts/security-summary.md
          if [ -f artifacts/safety-report.json ]; then
            echo "Safety scan completed. Check safety-report.json for details." >> artifacts/security-summary.md
          else
            echo "Safety scan failed or no vulnerabilities found." >> artifacts/security-summary.md
          fi
          echo "" >> artifacts/security-summary.md
          echo "Scan completed at: $(date)" >> artifacts/security-summary.md

      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            artifacts/bandit-report.json
            artifacts/safety-report.json
            artifacts/security-summary.md
          retention-days: 30

      - name: Security Gate Check
        run: |
          # Check for high-severity issues
          if [ -f artifacts/bandit-report.json ]; then
            high_issues=$(python -c "
            import json, sys
            try:
                with open('artifacts/bandit-report.json') as f:
                    data = json.load(f)
                high_count = sum(1 for r in data.get('results', []) if r.get('issue_severity') == 'HIGH')
                print(high_count)
            except:
                print(0)
            ")
            if [ "$high_issues" -gt 5 ]; then
              echo "‚ùå Security gate failed: $high_issues high-severity issues found"
              exit 1
            else
              echo "‚úÖ Security gate passed: $high_issues high-severity issues (threshold: 5)"
            fi
          fi

      - name: Comment security results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('artifacts/security-summary.md')) {
              const summary = fs.readFileSync('artifacts/security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîí Security Scan Results\n\n${summary}`
              });
            }