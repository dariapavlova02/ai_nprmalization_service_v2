name: ASCII Fastpath Parity Job

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/ai_service/layers/normalization/**'
      - 'src/ai_service/utils/ascii_utils.py'
      - 'scripts/ascii_fastpath_parity.py'
      - 'tests/golden_cases/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/ai_service/layers/normalization/**'
      - 'src/ai_service/utils/ascii_utils.py'
      - 'scripts/ascii_fastpath_parity.py'
      - 'tests/golden_cases/**'

jobs:
  ascii-fastpath-parity:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install optional morphology dependencies for testing
        pip install pymorphy3[ru] pymorphy3[uk] || echo "Morphology dependencies optional"

    - name: Run ASCII Fastpath Parity Job
      run: |
        python scripts/ascii_fastpath_parity.py

    - name: Upload Parity Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ascii-fastpath-parity-results
        path: ascii_fastpath_parity_results.json

    - name: Comment PR with Parity Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'ascii_fastpath_parity_results.json';
          
          if (fs.existsSync(path)) {
            const results = JSON.parse(fs.readFileSync(path, 'utf8'));
            
            // Calculate summary statistics
            const totalCases = results.length;
            const asciiCases = results.filter(r => r.is_ascii).length;
            const fastpathEligible = results.filter(r => r.fastpath_eligible).length;
            const fastpathSuccesses = results.filter(r => r.fastpath_success).length;
            const parityMatches = results.filter(r => r.results_match).length;
            const failedCases = results.filter(r => r.fastpath_eligible && !r.results_match);
            const errorCases = results.filter(r => r.error_message);
            
            const avgImprovement = results
              .filter(r => r.performance_improvement > 0)
              .reduce((sum, r) => sum + r.performance_improvement, 0) / 
              results.filter(r => r.performance_improvement > 0).length || 0;
            
            const comment = `## 🔍 ASCII Fastpath Parity Job Results
            
            ### 📊 Summary
            - **Total cases processed:** ${totalCases}
            - **ASCII cases:** ${asciiCases}
            - **Fastpath eligible cases:** ${fastpathEligible}
            - **Fastpath successes:** ${fastpathSuccesses}
            - **Parity matches:** ${parityMatches}
            - **Average performance improvement:** ${avgImprovement.toFixed(1)}%
            
            ### 🎯 Success Rates
            - **Fastpath success rate:** ${fastpathEligible > 0 ? (fastpathSuccesses / fastpathEligible * 100).toFixed(1) : 0}%
            - **Parity match rate:** ${fastpathEligible > 0 ? (parityMatches / fastpathEligible * 100).toFixed(1) : 0}%
            
            ${failedCases.length > 0 ? `### ❌ Failed Parity Cases (${failedCases.length})
            ${failedCases.map(c => `- \`${c.case_id}\``).join('\n')}` : ''}
            
            ${errorCases.length > 0 ? `### 💥 Error Cases (${errorCases.length})
            ${errorCases.map(c => `- \`${c.case_id}\`: ${c.error_message}`).join('\n')}` : ''}
            
            ${failedCases.length === 0 && errorCases.length === 0 ? '### ✅ All tests passed! ASCII fastpath maintains 100% semantic compatibility.' : ''}
            
            ---
            *This comment was automatically generated by the ASCII Fastpath Parity Job*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🔍 ASCII Fastpath Parity Job\n\n❌ Parity job failed to complete or generate results.'
            });
          }
