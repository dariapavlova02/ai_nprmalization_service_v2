name: Parity and Performance Gates

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  parity_and_perf_gate:
    runs-on: ubuntu-latest
    env:
      # –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ñ–∏—á–∏ –≤ SHADOW (–Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—á–∏—Ç–∞–µ–º, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
      SHADOW_MODE: "true"
      USE_FACTORY_NORMALIZER: "true"
      FIX_INITIALS_DOUBLE_DOT: "true"
      PRESERVE_HYPHENATED_CASE: "true"
      STRICT_STOPWORDS: "true"
      ENABLE_SPACY_NER: "true"
      ENABLE_NAMEPARSER_EN: "true"
      ENHANCED_DIMINUTIVES: "true"
      ENHANCED_GENDER_RULES: "true"
      ASCII_FASTPATH: "true"
      ENABLE_AC_TIER0: "true"
      ENABLE_VECTOR_FALLBACK: "true"
      DEBUG_TRACE: "true"

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with: 
          python-version: "3.11"

      - name: Install deps
        run: |
          pip install -e .[all,test]
          python - <<'PY'
          # lazy download models if flags set
          import os, subprocess
          if os.getenv("ENABLE_SPACY_NER")=="true":
              subprocess.run("python -m spacy download uk_core_news_sm", shell=True, check=False)
              subprocess.run("python -m spacy download en_core_web_sm", shell=True, check=False)
          PY

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Run golden parity (legacy vs factory-all-flags)
        run: |
          pytest tests/parity -q \
            --parity-compare=legacy,factory_flags_on \
            --parity-threshold=1.0 \
            --parity-report=artifacts/parity_report.json

      - name: Run performance gates
        run: |
          pytest -q -m perf_micro tests/performance \
            --perf-p95-max=0.010 \
            --perf-p99-max=0.020 \
            --perf-report=artifacts/perf.json

      - name: Spin up Elasticsearch (for AC+kNN)
        uses: getong/elasticsearch-action@v1.2
        with:
          elasticsearch version: '8.12.2'

      - name: Search integration (AC tier0/1 + vector fallback)
        run: |
          pytest -q tests/integration/search \
            -k "ac_tier or knn or hybrid" \
            --maxfail=1

      - name: Property + smoke + e2e gates
        run: |
          pytest -q tests/property --hypothesis-profile=ci
          pytest -q tests/smoke
          pytest -q tests/e2e -k "sanctions"

      - name: Build acceptance summary
        run: |
          python scripts/acceptance_summary.py \
            --parity artifacts/parity_report.json \
            --perf artifacts/perf.json \
            --out artifacts/ACCEPTANCE_GATES_STATUS.md

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-artifacts
          path: artifacts/**

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const summaryPath = 'artifacts/ACCEPTANCE_GATES_STATUS.md';
              if (fs.existsSync(summaryPath)) {
                const summary = fs.readFileSync(summaryPath, 'utf8');
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## üöÄ Parity and Performance Gates Results\n\n${summary}`
                });
              }
            } catch (error) {
              console.log('Could not read acceptance summary:', error.message);
            }
