#!/usr/bin/env python3

"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HybridSearchService –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω –ø–∞–¥–µ–Ω–∏—è.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def debug_hybrid_search_init():
    """–û—Ç–ª–∞–¥–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HybridSearchService."""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò HYBRIDSEARCHSERVICE")
    print("=" * 60)

    try:
        # –®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        print("1. –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
        from ai_service.layers.search.config import HybridSearchConfig
        from ai_service.layers.search.hybrid_search_service import HybridSearchService
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        try:
            search_config = HybridSearchConfig.from_env()
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:")
            print(f"   Elasticsearch hosts: {search_config.elasticsearch.hosts}")
            print(f"   Default index: {search_config.elasticsearch.default_index}")
            print(f"   AC index: {search_config.elasticsearch.ac_index}")
            print(f"   Vector index: {search_config.elasticsearch.vector_index}")
            print(f"   Enable fallback: {search_config.enable_fallback}")
            print(f"   Default mode: {search_config.default_mode}")
        except Exception as config_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_error}")
            print(f"   Type: {type(config_error)}")
            import traceback
            traceback.print_exc()
            return False

        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ HybridSearchService
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ HybridSearchService...")
        try:
            search_service = HybridSearchService(search_config)
            print("‚úÖ HybridSearchService —Å–æ–∑–¥–∞–Ω")
        except Exception as create_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HybridSearchService: {create_error}")
            print(f"   Type: {type(create_error)}")
            import traceback
            traceback.print_exc()
            return False

        # –®–∞–≥ 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HybridSearchService...")
        try:
            search_service.initialize()
            print("‚úÖ HybridSearchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")

            # –ü–æ–ø—Ä–æ–±—É–µ–º health check
            health = await search_service.health_check()
            print(f"‚úÖ Health check: {health}")

            return True

        except Exception as init_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HybridSearchService: {init_error}")
            print(f"   Type: {type(init_error)}")
            import traceback
            traceback.print_exc()

            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
            try:
                # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Elasticsearch
                print("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Elasticsearch...")
                import socket
                for host in search_config.elasticsearch.hosts:
                    try:
                        if ":" in host:
                            hostname, port = host.split(":")
                            port = int(port)
                        else:
                            hostname = host
                            port = 9200

                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        sock.settimeout(2)
                        result = sock.connect_ex((hostname, port))
                        sock.close()

                        if result == 0:
                            print(f"     ‚úÖ {hostname}:{port} –¥–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            print(f"     ‚ùå {hostname}:{port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (connect_ex: {result})")
                    except Exception as conn_error:
                        print(f"     ‚ùå {host} –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {conn_error}")

            except Exception as diag_error:
                print(f"   –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_error}")

            return False

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HYBRIDSEARCHSERVICE")
    print("=" * 50)

    success = await debug_hybrid_search_init()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: HybridSearchService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ùå FAILURE: HybridSearchService –Ω–µ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        print("   –ü–æ—ç—Ç–æ–º—É —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ MockSearchService.")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)