#!/usr/bin/env python3

"""
–¢–µ—Å—Ç fuzzy search –≤ HybridSearchService –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—á–µ–º—É –æ–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_hybrid_fuzzy_search():
    """–¢–µ—Å—Ç fuzzy search –≤ HybridSearchService."""
    print("üîç –¢–ï–°–¢ FUZZY SEARCH –í HYBRIDSEARCHSERVICE")
    print("=" * 60)

    try:
        # –°–æ–∑–¥–∞–µ–º HybridSearchService
        from ai_service.layers.search.config import HybridSearchConfig
        from ai_service.layers.search.hybrid_search_service import HybridSearchService
        from ai_service.layers.search.contracts import SearchOpts, SearchMode

        search_config = HybridSearchConfig.from_env()
        search_service = HybridSearchService(search_config)
        search_service.initialize()

        print("‚úÖ HybridSearchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º mock NormalizationResult
        class MockNormResult:
            def __init__(self, normalized, tokens):
                self.normalized = normalized
                self.normalized_text = normalized
                self.tokens = tokens
                self.trace = []
                self.language = "uk"
                self.confidence = 0.8
                self.success = True

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fuzzy search –Ω–∞–ø—Ä—è–º—É—é
        print("\n1. –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ fuzzy search...")

        query_text = "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"
        search_opts = SearchOpts(
            top_k=10,
            threshold=0.5,
            search_mode=SearchMode.HYBRID
        )

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º fuzzy candidates
            print("   –ó–∞–≥—Ä—É–∑–∫–∞ fuzzy candidates...")
            fuzzy_candidates = await search_service._get_fuzzy_candidates()
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(fuzzy_candidates)}")

            # –ü–æ–∏—Å–∫ –ö–æ–≤—Ä–∏–∫–æ–≤ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö
            kovrykov_candidates = [c for c in fuzzy_candidates if "–∫–æ–≤—Ä–∏–∫–æ–≤" in c.lower()]
            print(f"   '–ö–æ–≤—Ä–∏–∫–æ–≤' –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(kovrykov_candidates)}")
            for candidate in kovrykov_candidates[:3]:
                print(f"     - {candidate}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ candidates: {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fuzzy search
        print("\n2. –¢–µ—Å—Ç fuzzy search —á–µ—Ä–µ–∑ _fuzzy_search...")
        try:
            fuzzy_results = await search_service._fuzzy_search(
                query_text=query_text,
                opts=search_opts,
                search_trace=None
            )
            print(f"   Fuzzy —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(fuzzy_results)}")
            for result in fuzzy_results[:5]:
                print(f"     - {result.text} (score: {result.score:.3f})")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ fuzzy search: {e}")
            import traceback
            traceback.print_exc()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π find_candidates
        print("\n3. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ find_candidates...")
        try:
            norm_result = MockNormResult(query_text, query_text.split())
            all_results = await search_service.find_candidates(
                normalized=norm_result,
                text=query_text,
                opts=search_opts
            )
            print(f"   –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_results)}")
            for result in all_results[:5]:
                print(f"     - {result.text} (score: {result.score:.3f}, mode: {result.search_mode})")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ find_candidates: {e}")

        return True

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FUZZY SEARCH –í HYBRIDSEARCHSERVICE")
    print("=" * 50)

    success = await test_hybrid_fuzzy_search()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: Fuzzy search –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        print("‚ùå FAILURE: –ü—Ä–æ–±–ª–µ–º—ã —Å fuzzy search")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)