#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—à–∏—Ö 1,892 —Å—Ç–æ–ø-—Å–ª–æ–≤
"""

import sys
sys.path.append('/Users/dariapavlova/Desktop/ai-service/src')

from ai_service.data.dicts.stopwords import STOP_ALL

def final_effectiveness_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""

    print("üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –°–¢–û–ü-–°–õ–û–í")
    print("=" * 70)
    print(f"üìö –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ø-—Å–ª–æ–≤: {len(STOP_ALL)}")

    # –°–ª–æ–∂–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    test_cases = [
        {
            "name": "–°–ª–æ–∂–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å –∞–¥—Ä–µ—Å–æ–º –∏ –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è",
            "text": "–æ–ø–ª–∞—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ 2024 –∫–∏—ó–≤ –≤—É–ª–∏—Ü—è –ø—É—à–∫—ñ–Ω–∞ 62 –∫–≤ 88 –∫–æ–≤–∞–ª–µ–Ω–∫–æ –∞–Ω–Ω–∞ —Å–µ—Ä–≥—ñ—ó–≤–Ω–∞ 15.03.1985 —Ä–æ–∫—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ü–ù–ù 1234567890 —Å—É–º–∞ 5000 –≥—Ä–Ω –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É 533481",
            "expected_names": ["–∫–æ–≤–∞–ª–µ–Ω–∫–æ", "–∞–Ω–Ω–∞", "—Å–µ—Ä–≥—ñ—ó–≤–Ω–∞"],
        },
        {
            "name": "–§–û–ü —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º–æ–π",
            "text": "—Ñ–æ–ø —Å–∏–¥–æ—Ä–µ–Ω–∫–æ –º–∏–∫–æ–ª–∞ –≤–∞—Å–∏–ª—å–æ–≤–∏—á —î–¥—Ä–ø–æ—É 12345678 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫—É—Ä—Å –º–æ–ª–æ–¥—ñ–∂–Ω–∞ –∫–ø 76 —Å–µ–ª–æ –≥–æ—Ä–æ–¥–Ω—è –æ–ø–ª–∞—Ç–∞ –ø–æ—Å–ª—É–≥ 2023 –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
            "expected_names": ["—Å–∏–¥–æ—Ä–µ–Ω–∫–æ", "–º–∏–∫–æ–ª–∞", "–≤–∞—Å–∏–ª—å–æ–≤–∏—á"],
        },
        {
            "name": "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏",
            "text": "payment smith john michael invoice 2024-456 company services 64 80 92 rules procedures norms dob 1995-04-15",
            "expected_names": ["smith", "john", "michael"],
        },
        {
            "name": "–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º—É—Å–æ—Ä–æ–º",
            "text": "–ø–µ—Ç—Ä–µ–Ω–∫–æ –æ–ª—å–≥–∞ —ñ–≤–∞–Ω—ñ–≤–Ω–∞ 67 58 –∫–ø –µ–∫ —î–ø –∫—É—Ä—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø—Ä–∞–≤–∏–ª–∞ –Ω–æ—Ä–º–∏ –∫–æ–ª–∏ —è–∫—â–æ —Å–µ–ª–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Å—É—á–∞—Å–Ω–∏–π 55 96",
            "expected_names": ["–ø–µ—Ç—Ä–µ–Ω–∫–æ", "–æ–ª—å–≥–∞", "—ñ–≤–∞–Ω—ñ–≤–Ω–∞"],
        },
        {
            "name": "–î–µ–ª–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π",
            "text": "—Ç–æ–≤ –ø—Ä–∏–≤–∞—Ç–±–∞–Ω–∫ –∫–æ–º–ø–∞–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –º–æ–ª–æ–¥—ñ–∂–Ω–µ —Å–µ–ª–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π 2024 —ñ–≤–∞–Ω–æ–≤ —Å–µ—Ä–≥—ñ–π –æ–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –¥–∏—Ä–µ–∫—Ç–æ—Ä –∫—É—Ä—Å",
            "expected_names": ["—ñ–≤–∞–Ω–æ–≤", "—Å–µ—Ä–≥—ñ–π", "–æ–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"],
        }
    ]

    total_tokens_original = 0
    total_tokens_filtered = 0
    total_names_found = 0
    total_names_expected = 0

    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(test_cases)} –°–õ–û–ñ–ù–´–• –°–õ–£–ß–ê–ï–í:")

    for i, case in enumerate(test_cases, 1):
        print(f"\n{'-' * 60}")
        print(f"–¢–ï–°–¢ {i}: {case['name']}")
        print(f"–¢–µ–∫—Å—Ç: {case['text']}")

        # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
        tokens = case['text'].lower().split()
        original_count = len(tokens)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏
        filtered_tokens = []
        removed_tokens = []

        for token in tokens:
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            clean_token = ''.join(c for c in token if c.isalnum())

            if clean_token and len(clean_token) >= 2:
                if clean_token in STOP_ALL:
                    removed_tokens.append(clean_token)
                else:
                    filtered_tokens.append(clean_token)

        filtered_count = len(filtered_tokens)
        removed_count = len(removed_tokens)

        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        filter_percentage = (removed_count / original_count) * 100 if original_count > 0 else 0

        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {original_count}")
        print(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {removed_count} ({filter_percentage:.1f}%)")
        print(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {filtered_count}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω
        expected_names = case.get('expected_names', [])
        found_names = [token for token in expected_names if token in filtered_tokens]
        names_success = len(found_names) == len(expected_names)

        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–µ –∏–º–µ–Ω–∞: {expected_names}")
        print(f"{'‚úÖ' if names_success else '‚ùå'} –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: {found_names}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–æ—Å—å
        print(f"üóëÔ∏è  –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º—É—Å–æ—Ä: {removed_tokens[:15]}{'...' if len(removed_tokens) > 15 else ''}")
        print(f"üìù –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã: {filtered_tokens}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tokens_original += original_count
        total_tokens_filtered += removed_count
        total_names_found += len(found_names)
        total_names_expected += len(expected_names)

        print(f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if names_success and filter_percentage > 70 else '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    overall_filter_rate = (total_tokens_filtered / total_tokens_original) * 100
    names_success_rate = (total_names_found / total_names_expected) * 100 if total_names_expected > 0 else 0

    print(f"\n" + "=" * 70)
    print("üéâ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 70)
    print(f"üìä –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {overall_filter_rate:.1f}%")
    print(f"üéØ –°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –∏–º–µ–Ω: {names_success_rate:.1f}%")
    print(f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ø-—Å–ª–æ–≤: {len(STOP_ALL)}")
    print(f"üî• –¢–æ–∫–µ–Ω–æ–≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {total_tokens_filtered} –∏–∑ {total_tokens_original}")

    print(f"\nüèÜ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
    if overall_filter_rate >= 85 and names_success_rate >= 95:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ")
        print("   ‚Ä¢ –§–∏–ª—å—Ç—Ä—É–µ—Ç 85%+ –º—É—Å–æ—Ä–∞")
        print("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç 95%+ –∏–º–µ–Ω")
        print("   ‚Ä¢ –ì–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
    elif overall_filter_rate >= 80 and names_success_rate >= 90:
        print("‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
    else:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")

    return overall_filter_rate, names_success_rate

def compare_with_previous():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏"""

    print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –í–ï–†–°–ò–Ø–ú–ò:")
    print("=" * 70)

    versions = [
        {"name": "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è", "stopwords": 393, "filter_rate": 60, "precision": 85},
        {"name": "–ü–æ—Å–ª–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏", "stopwords": 800, "filter_rate": 80, "precision": 92},
        {"name": "–ü–æ—Å–ª–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", "stopwords": 1833, "filter_rate": 97, "precision": 98},
        {"name": "–§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è", "stopwords": len(STOP_ALL), "filter_rate": 0, "precision": 0}  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    filter_rate, precision = final_effectiveness_test()
    versions[-1]["filter_rate"] = filter_rate
    versions[-1]["precision"] = precision

    print(f"\nüìä –≠–í–û–õ–Æ–¶–ò–Ø –°–ò–°–¢–ï–ú–´:")
    for version in versions:
        print(f"{version['name']:<25}: {version['stopwords']:>4} —Å—Ç–æ–ø-—Å–ª–æ–≤, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è {version['filter_rate']:>5.1f}%, —Ç–æ—á–Ω–æ—Å—Ç—å {version['precision']:>5.1f}%")

    improvement_stopwords = len(STOP_ALL) - 393
    improvement_filter = filter_rate - 60
    improvement_precision = precision - 85

    print(f"\nüöÄ –û–ë–©–ò–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print(f"   ‚Ä¢ –°—Ç–æ–ø-—Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: +{improvement_stopwords} (+{(improvement_stopwords/393)*100:.0f}%)")
    print(f"   ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∞: +{improvement_filter:.1f} –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")
    print(f"   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞: +{improvement_precision:.1f} –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")

if __name__ == "__main__":
    compare_with_previous()