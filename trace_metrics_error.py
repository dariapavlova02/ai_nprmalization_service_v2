#!/usr/bin/env python3

"""
–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ metrics –æ—à–∏–±–∫–∏.
"""

import sys
import traceback
import linecache
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

class MetricsErrorTracer:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ metrics –æ—à–∏–±–∫–∏."""

    def __init__(self):
        self.original_getattr = object.__getattribute__
        self.metrics_accesses = []

    def trace_metrics_access(self, obj, name):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ metrics."""
        if name == 'metrics':
            import inspect
            frame = inspect.currentframe()
            if frame and frame.f_back:
                caller_frame = frame.f_back
                filename = caller_frame.f_filename
                line_number = caller_frame.f_lineno
                function_name = caller_frame.f_code.co_name
                line_content = linecache.getline(filename, line_number).strip()

                self.metrics_accesses.append({
                    'file': filename,
                    'line': line_number,
                    'function': function_name,
                    'code': line_content,
                    'locals': dict(caller_frame.f_locals.keys()) if caller_frame.f_locals else {}
                })

                print(f"üîç METRICS ACCESS: {filename}:{line_number} in {function_name}")
                print(f"   Code: {line_content}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ metrics –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                if 'metrics' not in caller_frame.f_locals:
                    print(f"‚ùå METRICS NOT IN LOCALS: {list(caller_frame.f_locals.keys())}")
                else:
                    print(f"‚úÖ METRICS FOUND: {type(caller_frame.f_locals['metrics'])}")

        return self.original_getattr(obj, name)

def test_with_tracing():
    """–¢–µ—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π."""
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê METRICS ERROR")
    print("=" * 60)

    tracer = MetricsErrorTracer()

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
        from ai_service.layers.normalization.normalization_service import NormalizationService

        print("‚úÖ NormalizationService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        service = NormalizationService()
        print("‚úÖ NormalizationService —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
        test_text = "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á"
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é: '{test_text}'")

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        try:
            result = service.normalize(
                text=test_text,
                language="uk",
                remove_stop_words=True,
                preserve_names=True,
                enable_advanced_features=False
            )

            print("üìã –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"   Success: {result.success}")
            print(f"   Errors: {result.errors}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ metrics –æ—à–∏–±–∫–∏
            if result.errors:
                for error in result.errors:
                    if "metrics" in str(error).lower() and "not defined" in str(error).lower():
                        print(f"‚ùå –ù–ê–ô–î–ï–ù–ê METRICS –û–®–ò–ë–ö–ê: {error}")
                        return False

            print("‚úÖ –ù–µ—Ç metrics –æ—à–∏–±–æ–∫!")
            return True

        except NameError as e:
            if "metrics" in str(e):
                print(f"‚ùå –ü–û–ô–ú–ê–ù–ê METRICS NAMEERROR: {e}")

                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
                tb = traceback.extract_tb(sys.exc_info()[2])
                print("\nüìç –î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê:")
                print("-" * 50)

                for i, frame in enumerate(tb):
                    print(f"  {i+1}. {frame.filename}:{frame.lineno}")
                    print(f"     –§—É–Ω–∫—Ü–∏—è: {frame.name}")
                    print(f"     –ö–æ–¥: {frame.line}")

                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å metrics
                    if frame.line and "metrics" in frame.line:
                        print(f"     ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–ê–Ø –°–¢–†–û–ö–ê!")

                        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                        print(f"     üìÑ –ö–û–ù–¢–ï–ö–°–¢ (—Å—Ç—Ä–æ–∫–∏ {frame.lineno-3} - {frame.lineno+3}):")
                        for line_num in range(max(1, frame.lineno-3), frame.lineno+4):
                            line_content = linecache.getline(frame.filename, line_num).rstrip()
                            marker = " >>> " if line_num == frame.lineno else "     "
                            print(f"     {marker}{line_num:4d}: {line_content}")
                    print()

                print("-" * 50)
                return False
            else:
                print(f"‚ÑπÔ∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")
                return True

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

            if "metrics" in str(e).lower():
                print("üéØ –≠—Ç–æ metrics-—Å–≤—è–∑–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!")
                traceback.print_exc()
                return False
            return True

    except Exception as setup_error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {setup_error}")
        return False

def analyze_all_metrics_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç metrics."""
    print("\nüîç –ê–ù–ê–õ–ò–ó –í–°–ï–• METRICS-–§–ê–ô–õ–û–í")
    print("=" * 50)

    metrics_files = [
        "/Users/dariapavlova/Desktop/ai-service/src/ai_service/core/unified_orchestrator.py",
        "/Users/dariapavlova/Desktop/ai-service/src/ai_service/layers/signals/signals_service.py",
        "/Users/dariapavlova/Desktop/ai-service/src/ai_service/layers/normalization/processors/result_builder.py"
    ]

    for file_path in metrics_files:
        print(f"\nüìÑ –ê–ù–ê–õ–ò–ó: {file_path.split('/')[-1]}")
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            for i, line in enumerate(lines, 1):
                if 'metrics.' in line and 'if metrics' not in line and 'def ' not in line:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None —Ä—è–¥–æ–º
                    context_start = max(0, i-5)
                    context_end = min(len(lines), i+2)
                    context = lines[context_start:context_end]

                    has_null_check = any('if metrics' in ctx_line for ctx_line in context)

                    status = "‚úÖ" if has_null_check else "‚ùå"
                    print(f"   {status} –°—Ç—Ä–æ–∫–∞ {i:4d}: {line.strip()}")

                    if not has_null_check:
                        print(f"        ‚ö†Ô∏è –ù–ï–¢ –ü–†–û–í–ï–†–ö–ò –ù–ê None!")
                        print(f"        üìÑ –ö–û–ù–¢–ï–ö–°–¢:")
                        for j, ctx_line in enumerate(context):
                            line_num = context_start + j + 1
                            marker = " >>> " if line_num == i else "     "
                            print(f"        {marker}{line_num:4d}: {ctx_line.rstrip()}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê METRICS ERROR")
    print("=" * 70)

    # –¢–µ—Å—Ç 1: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    success = test_with_tracing()

    # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
    analyze_all_metrics_files()

    print("\n" + "=" * 70)
    if success:
        print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ—Ç metrics –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π—Å—è –æ—à–∏–±–∫–∏:")
        print("   - –°–µ—Ä–≤–∏—Å –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥")
        print("   - –û—à–∏–±–∫–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
    else:
        print("‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π–¥–µ–Ω–∞ metrics –æ—à–∏–±–∫–∞")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –≤—ã—à–µ")

    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)