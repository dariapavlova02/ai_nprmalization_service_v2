#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è metrics –æ—à–∏–±–∫–∏.
"""

import sys
import traceback
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_full_processing_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ."""
    print("üîç –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    print("=" * 60)

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from ai_service.layers.validation.validation_service import ValidationService
        from ai_service.layers.smart_filter.name_detector import NameDetector
        from ai_service.layers.language.language_service import LanguageService
        from ai_service.layers.unicode.unicode_service import UnicodeService
        from ai_service.layers.normalization.normalization_service import NormalizationService
        from ai_service.layers.signals.signals_service import SignalsService

        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        try:
            validation_service = ValidationService()
            name_detector = NameDetector()
            language_service = LanguageService()
            unicode_service = UnicodeService()
            normalization_service = NormalizationService()
            signals_service = SignalsService()

            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_cases = [
            "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á",
            "–ü–æ—Ä–æ—à–µ–Ω–∫–æ –ü–µ—Ç—Ä–æ –û–ª–µ–∫—Å—ñ–π–æ–≤–∏—á –Ü–ü–ù 123456789012",
            "–¢–û–í \"–ë–µ—Å—Ç –ö–æ–º–ø–∞–Ω—ñ\" –Ñ–î–†–ü–û–£ 12345678"
        ]

        for i, test_text in enumerate(test_cases, 1):
            print(f"\n{i}. –¢–ï–°–¢: '{test_text}'")

            try:
                # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è
                validation_result = validation_service.validate(test_text)
                print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {validation_result}")

                # –®–∞–≥ 2: –£–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
                filter_result = name_detector.should_process(test_text)
                print(f"   ‚úÖ –£–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: {filter_result}")

                # –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
                language_result = language_service.detect(test_text)
                print(f"   ‚úÖ –Ø–∑—ã–∫: {language_result}")

                # –®–∞–≥ 4: Unicode –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                unicode_result = unicode_service.normalize(test_text)
                print(f"   ‚úÖ Unicode: {unicode_result}")

                # –®–∞–≥ 5: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω (–ó–î–ï–°–¨ –ú–û–ñ–ï–¢ –ë–´–¢–¨ –û–®–ò–ë–ö–ê)
                try:
                    norm_result = normalization_service.normalize(
                        text=unicode_result,
                        language=language_result.language if hasattr(language_result, 'language') else "uk",
                        remove_stop_words=True,
                        preserve_names=True,
                        enable_advanced_features=False
                    )
                    print(f"   ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: success={norm_result.success}")

                    if norm_result.errors:
                        for error in norm_result.errors:
                            if "metrics" in str(error).lower():
                                print(f"   ‚ùå –ù–ê–ô–î–ï–ù–ê METRICS –û–®–ò–ë–ö–ê –í –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò: {error}")
                                return False

                except Exception as norm_error:
                    if "metrics" in str(norm_error).lower():
                        print(f"   ‚ùå METRICS –û–®–ò–ë–ö–ê –í –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò: {norm_error}")
                        print("   üìç –¢–†–ê–°–°–ò–†–û–í–ö–ê:")
                        traceback.print_exc()
                        return False
                    else:
                        print(f"   ‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {norm_error}")
                        continue

                # –®–∞–≥ 6: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ (–ó–î–ï–°–¨ –¢–û–ñ–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –û–®–ò–ë–ö–ê)
                try:
                    signals_result = signals_service.extract_signals(
                        text=unicode_result,
                        normalization_result=norm_result,
                        language=language_result.language if hasattr(language_result, 'language') else "uk"
                    )
                    print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª—ã: confidence={signals_result.confidence}")

                except Exception as signals_error:
                    if "metrics" in str(signals_error).lower():
                        print(f"   ‚ùå METRICS –û–®–ò–ë–ö–ê –í –°–ò–ì–ù–ê–õ–ê–•: {signals_error}")
                        print("   üìç –¢–†–ê–°–°–ò–†–û–í–ö–ê:")
                        traceback.print_exc()
                        return False
                    else:
                        print(f"   ‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_error}")
                        continue

                print(f"   üéâ –¢–ï–°–¢ {i} –£–°–ü–ï–®–ï–ù!")

            except Exception as e:
                if "metrics" in str(e).lower() and "not defined" in str(e).lower():
                    print(f"   ‚ùå METRICS –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï {i}: {e}")
                    print("   üìç –î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê:")

                    tb = traceback.extract_tb(sys.exc_info()[2])
                    for frame in tb:
                        print(f"      {frame.filename}:{frame.lineno} –≤ {frame.name}")
                        print(f"      –ö–æ–¥: {frame.line}")

                        if frame.line and "metrics" in frame.line:
                            print(f"      üéØ –ü–†–û–ë–õ–ï–ú–ù–ê–Ø –°–¢–†–û–ö–ê!")

                    return False
                else:
                    print(f"   ‚ÑπÔ∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")

        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –ü–†–û–®–õ–ò!")
        return True

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True  # –≠—Ç–æ –Ω–µ metrics –æ—à–∏–±–∫–∞
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_unified_orchestrator_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ UnifiedOrchestrator."""
    print("\nüîç –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø UNIFIED ORCHESTRATOR")
    print("=" * 50)

    try:
        from ai_service.core.unified_orchestrator import UnifiedOrchestrator

        print("‚úÖ UnifiedOrchestrator –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        # (—ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å metrics –æ—à–∏–±–∫—É)

        print("‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è orchestrator —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        print("   (–≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è –∏–∑-–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å metrics –æ—à–∏–±–æ–∫)")

        return True

    except Exception as e:
        if "metrics" in str(e).lower():
            print(f"‚ùå METRICS –û–®–ò–ë–ö–ê –í ORCHESTRATOR: {e}")
            traceback.print_exc()
            return False
        else:
            print(f"‚ÑπÔ∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ orchestrator: {e}")
            return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("=" * 70)

    # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    test1_success = test_full_processing_pipeline()

    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ UnifiedOrchestrator
    test2_success = test_unified_orchestrator_creation()

    overall_success = test1_success and test2_success

    print("\n" + "=" * 70)
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")

    if test1_success:
        print("‚úÖ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: –£–°–ü–ï–®–ï–ù")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: –ù–ï–£–°–ü–ï–®–ï–ù")

    if test2_success:
        print("‚úÖ –¢–µ—Å—Ç UnifiedOrchestrator: –£–°–ü–ï–®–ï–ù")
    else:
        print("‚ùå –¢–µ—Å—Ç UnifiedOrchestrator: –ù–ï–£–°–ü–ï–®–ï–ù")

    if overall_success:
        print("\nüéâ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò")
        print("   –õ–æ–∫–∞–ª—å–Ω–æ metrics –æ—à–∏–±–æ–∫ –Ω–µ—Ç!")
        print("   –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ —Ç–æ–º, —á—Ç–æ Docker —Å–µ—Ä–≤–∏—Å")
        print("   –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞.")
    else:
        print("\n‚ùå –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ï–°–¢–¨ METRICS –û–®–ò–ë–ö–ò")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

    return overall_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)