#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Aho-Corasick –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import os
import time

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["ENABLE_AHO_CORASICK"] = "true"
os.environ["ENABLE_EMBEDDINGS"] = "true"
os.environ["ENABLE_DECISION_ENGINE"] = "true"
os.environ["ENABLE_FAISS_INDEX"] = "true"

def test_aho_corasick():
    """–¢–µ—Å—Ç Aho-Corasick"""
    print("=== –¢–µ—Å—Ç Aho-Corasick ===")
    try:
        from src.ai_service.layers.smart_filter.smart_filter_service import SmartFilterService
        
        service = SmartFilterService(enable_aho_corasick=True)
        print("‚úì SmartFilterService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        result = service.search_aho_corasick("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", max_matches=5)
        print(f"‚úì AC –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(result.get('matches', []))} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ AC: {e}")
        return False

def test_vector_search():
    """–¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("\n=== –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ===")
    try:
        from src.ai_service.layers.embeddings.indexing.vector_index_service import CharTfidfVectorIndex, VectorIndexConfig
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        docs = [
            ("doc1", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"),
            ("doc2", "–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤"),
            ("doc3", "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞")
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        config = VectorIndexConfig(use_faiss=True)
        index = CharTfidfVectorIndex(config)
        index.rebuild(docs)
        print("‚úì –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        results = index.search("–ò–≤–∞–Ω", top_k=3)
        print(f"‚úì Vector –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        for doc_id, score in results:
            print(f"  - {doc_id}: {score:.4f}")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ Vector: {e}")
        return False

def test_embeddings():
    """–¢–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("\n=== –¢–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ===")
    try:
        from src.ai_service.layers.embeddings.optimized_embedding_service import OptimizedEmbeddingService
        
        service = OptimizedEmbeddingService()
        print("‚úì EmbeddingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        result = service.get_embeddings_optimized(["—Ç–µ—Å—Ç"])
        if result["success"]:
            print(f"‚úì Embeddings —Ä–∞–±–æ—Ç–∞—é—Ç: –ø–æ–ª—É—á–µ–Ω –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–º {len(result['embeddings'][0])}")
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ embeddings: {result.get('error', 'Unknown')}")
            return False
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ Embeddings: {e}")
        return False

def test_faiss_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FAISS"""
    print("\n=== –¢–µ—Å—Ç FAISS ===")
    try:
        import faiss
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–µ–∫—Å
        dimension = 128
        index = faiss.IndexFlatL2(dimension)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
        vectors = np.random.random((5, dimension)).astype('float32')
        index.add(vectors)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        query = np.random.random((1, dimension)).astype('float32')
        scores, indices = index.search(query, 3)
        
        print(f"‚úì FAISS —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(indices[0])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ FAISS: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò AHO-CORASICK –ò –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    tests = [
        ("FAISS", test_faiss_availability),
        ("Aho-Corasick", test_aho_corasick),
        ("Vector Search", test_vector_search),
        ("Embeddings", test_embeddings),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    successful = 0
    for test_name, success in results:
        status = "‚úì –†–ê–ë–û–¢–ê–ï–¢" if success else "‚úó –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"{test_name}: {status}")
        if success:
            successful += 1
    
    print(f"\n–£—Å–ø–µ—à–Ω–æ: {successful}/{len(results)}")
    
    if successful == len(results):
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø")

if __name__ == "__main__":
    main()
