#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""
import sys
import os
sys.path.insert(0, 'src')

def check_config():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===")
    env_vars = [
        "ENABLE_AHO_CORASICK",
        "AHO_CORASICK_CONFIDENCE_BONUS",
        "ENABLE_SMART_FILTER",
        "ALLOW_SMART_FILTER_SKIP",
        "ENABLE_SEARCH"
    ]

    for var in env_vars:
        value = os.getenv(var, "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        print(f"{var}: {value}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º SERVICE_CONFIG
    print("\n=== SERVICE_CONFIG ===")
    try:
        from ai_service.config import SERVICE_CONFIG
        print(f"enable_aho_corasick: {SERVICE_CONFIG.enable_aho_corasick}")
        print(f"aho_corasick_confidence_bonus: {SERVICE_CONFIG.aho_corasick_confidence_bonus}")
        print(f"enable_smart_filter: {SERVICE_CONFIG.enable_smart_filter}")
        print(f"allow_smart_filter_skip: {SERVICE_CONFIG.allow_smart_filter_skip}")
        print(f"enable_search: {SERVICE_CONFIG.enable_search}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config: {e}")

    # –¢–µ—Å—Ç SmartFilter —Å —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    print("\n=== –¢–µ—Å—Ç SmartFilter ===")
    try:
        from ai_service.layers.smart_filter.smart_filter_service import SmartFilterService

        smart_filter = SmartFilterService(
            language_service=None,
            signal_service=None,
            enable_terrorism_detection=True,
            enable_aho_corasick=True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º
        )

        test_text = "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á"
        result = smart_filter.should_process_text(test_text)

        print(f"–¢–µ–∫—Å—Ç: {test_text}")
        print(f"Should process: {result.should_process}")
        print(f"Confidence: {result.confidence}")

        ac_details = result.signal_details.get('aho_corasick_matches', {})
        print(f"AC matches: {ac_details.get('total_matches', 0)}")
        print(f"AC enabled: {ac_details.get('enabled', False)}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ SmartFilter: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_config()