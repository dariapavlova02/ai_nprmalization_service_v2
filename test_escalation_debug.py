#!/usr/bin/env python3

"""
–¢–µ—Å—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ HybridSearchService –¥–ª—è "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω".
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_escalation_debug():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏."""
    print("üîç –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –≠–°–ö–ê–õ–ê–¶–ò–ò")
    print("=" * 60)

    try:
        # –°–æ–∑–¥–∞–µ–º HybridSearchService
        from ai_service.layers.search.config import HybridSearchConfig
        from ai_service.layers.search.hybrid_search_service import HybridSearchService
        from ai_service.layers.search.contracts import SearchOpts, SearchMode

        search_config = HybridSearchConfig.from_env()
        search_service = HybridSearchService(search_config)
        search_service.initialize()

        print("‚úÖ HybridSearchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º mock NormalizationResult
        class MockNormResult:
            def __init__(self, normalized, tokens):
                self.normalized = normalized
                self.normalized_text = normalized
                self.tokens = tokens
                self.trace = []
                self.language = "uk"
                self.confidence = 0.8
                self.success = True

        query_text = "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"
        search_opts = SearchOpts(
            top_k=10,
            threshold=0.5,
            search_mode=SearchMode.HYBRID,
            enable_escalation=True,       # ‚≠ê –í–ê–ñ–ù–û: –≤–∫–ª—é—á–∞–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
            escalation_threshold=0.8      # ‚≠ê –í–ê–ñ–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
        )

        print(f"üìä SearchOpts:")
        print(f"   search_mode: {search_opts.search_mode}")
        print(f"   enable_escalation: {search_opts.enable_escalation}")
        print(f"   escalation_threshold: {search_opts.escalation_threshold}")
        print(f"   top_k: {search_opts.top_k}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π find_candidates
        print(f"\nüîç –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ find_candidates –¥–ª—è: '{query_text}'")
        norm_result = MockNormResult(query_text, query_text.split())
        all_results = await search_service.find_candidates(
            normalized=norm_result,
            text=query_text,
            opts=search_opts
        )

        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_results)}")

        if all_results:
            print(f"   –¢–û–ü-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for i, result in enumerate(all_results[:5], 1):
                print(f"     {i}. {result.text}")
                print(f"        - score: {result.score:.3f}")
                print(f"        - search_mode: {result.search_mode}")
                print(f"        - confidence: {result.confidence:.3f}")
        else:
            print("   ‚ùå –ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")

        return len(all_results) > 0

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–°–ö–ê–õ–ê–¶–ò–ò")
    print("=" * 50)

    success = await test_escalation_debug()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: –≠—Å–∫–∞–ª–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
    else:
        print("‚ùå FAILURE: –ü—Ä–æ–±–ª–µ–º—ã —Å —ç—Å–∫–∞–ª–∞—Ü–∏–µ–π")
        print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print("   1. enable_escalation = False")
        print("   2. escalation_threshold —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π")
        print("   3. AC search –Ω–∞—Ö–æ–¥–∏—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("   4. –ü—Ä–æ–±–ª–µ–º—ã –≤ _fuzzy_search")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)