#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ production runtime - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –∏ —Ñ–ª–∞–≥–∞—Ö.
"""

import os
import sys
import json
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_production_config():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–ª–∞–≥–æ–≤."""
    print("=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===")

    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –∏–º–µ–Ω
    critical_flags = [
        'PRESERVE_FEMININE_SURNAMES',
        'ENABLE_ENHANCED_GENDER_RULES',
        'PRESERVE_FEMININE_SUFFIX_UK',
        'ENABLE_FSM_TUNED_ROLES',
        'MORPHOLOGY_CUSTOM_RULES_FIRST',
        'ENABLE_ADVANCED_FEATURES'
    ]

    for flag in critical_flags:
        value = os.getenv(flag, 'MISSING')
        print(f"{flag}={value}")

    print("\n=== –ü–†–û–í–ï–†–ö–ê SMART FILTER –§–õ–ê–ì–û–í ===")
    filter_flags = [
        'ENABLE_SMART_FILTER',
        'ALLOW_SMART_FILTER_SKIP',
        'ENABLE_AHO_CORASICK',
        'ENABLE_VECTOR_FALLBACK'
    ]

    for flag in filter_flags:
        value = os.getenv(flag, 'MISSING')
        print(f"{flag}={value}")

def test_morphology_adapter():
    """–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏."""
    print("\n=== –¢–ï–°–¢ –ú–û–†–§–û–õ–û–ì–ò–ò –ê–î–ê–ü–¢–ï–†–ê ===")

    try:
        from ai_service.layers.normalization.morphology_adapter import MorphologyAdapter

        adapter = MorphologyAdapter()
        print("‚úÖ MorphologyAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        test_cases = [
            ("–ü–∞–≤–ª–æ–≤–æ—ó", "uk", "–ü–∞–≤–ª–æ–≤–∞"),  # –∂–µ–Ω—Å–∫–∞—è —Ñ–∞–º–∏–ª–∏—è
            ("–ü–æ—Ä–æ—à–µ–Ω–∫–∞", "uk", "–ü–æ—Ä–æ—à–µ–Ω–∫–æ"),  # –º—É–∂—Å–∫–∞—è —Ñ–∞–º–∏–ª–∏—è
            ("–î–∞—Ä º—ó", "uk", "–î–∞—Ä º—è"),  # –∏–º—è —Å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º
            ("–Æ—Ä—ñ—ó–≤–Ω–∏", "uk", "–Æ—Ä—ñ—ó–≤–Ω–∞")  # –æ—Ç—á–µ—Å—Ç–≤–æ –∂–µ–Ω—Å–∫–æ–µ
        ]

        for word, lang, expected in test_cases:
            try:
                result = adapter.to_nominative(word, lang)
                status = "‚úÖ" if result == expected else "‚ùå"
                print(f"{status} {word} ({lang}) ‚Üí {result} (–æ–∂–∏–¥–∞–ª–∏: {expected})")
            except Exception as e:
                print(f"‚ùå {word} ({lang}) ‚Üí ERROR: {e}")

    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MorphologyAdapter: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

def test_normalization_flags():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("\n=== –¢–ï–°–¢ –§–õ–ê–ì–û–í –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò ===")

    try:
        from ai_service.layers.normalization.flags import FeatureFlags

        flags = FeatureFlags()
        print("‚úÖ FeatureFlags –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–ª–∞–≥–∏
        key_flags = [
            'preserve_feminine_surnames',
            'enable_enhanced_gender_rules',
            'preserve_feminine_suffix_uk',
            'enable_advanced_features'
        ]

        for flag_name in key_flags:
            value = getattr(flags, flag_name, 'MISSING')
            print(f"{flag_name}: {value}")

    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å FeatureFlags: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_full_normalization():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("\n=== –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò ===")

    try:
        from ai_service.layers.normalization.normalization_service import NormalizationService

        service = NormalizationService()
        print("‚úÖ NormalizationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        test_cases = [
            "–ü–æ—Ä–æ—à–µ–Ω–∫–∞ –ü–µ—Ç–µ–Ω—å–∫–∞",
            "–ü–∞–≤–ª–æ–≤–æ—ó –î–∞—Ä º—ó –Æ—Ä—ñ—ó–≤–Ω–∏"
        ]

        for text in test_cases:
            try:
                result = service.normalize_sync(
                    text=text,
                    language="uk",
                    remove_stop_words=True,
                    preserve_names=True,
                    enable_advanced_features=True
                )

                print(f"\nüìù –¢–µ–∫—Å—Ç: '{text}'")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result.normalized}'")
                print(f"   –¢–æ–∫–µ–Ω—ã: {result.tokens}")
                print(f"   –¢—Ä–µ–π—Å:")
                for i, trace in enumerate(result.trace[:3]):  # –ø–µ—Ä–≤—ã–µ 3
                    print(f"     {i}: {trace.get('token', 'N/A')} ‚Üí {trace.get('role', 'N/A')} ‚Üí {trace.get('output', 'N/A')}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ '{text}': {e}")

    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å NormalizationService: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_smart_filter():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SmartFilter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    print("\n=== –¢–ï–°–¢ SMART FILTER ===")

    try:
        from ai_service.layers.smart_filter.name_detector import NameDetector

        detector = NameDetector()
        print("‚úÖ NameDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –∏–º–µ–Ω
        test_cases = [
            "–ü–æ—Ä–æ—à–µ–Ω–∫–∞ –ü–µ—Ç–µ–Ω—å–∫–∞",
            "–ü–∞–≤–ª–æ–≤–æ—ó –î–∞—Ä º—ó –Æ—Ä—ñ—ó–≤–Ω–∏"
        ]

        for text in test_cases:
            try:
                result = detector.detect_name_signals(text)
                print(f"\nüìù –¢–µ–∫—Å—Ç: '{text}'")
                print(f"   Confidence: {result.get('confidence', 'N/A')}")
                print(f"   Should process: {result.get('should_process', 'N/A')}")
                print(f"   Signals: {result.get('detected_signals', [])}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ '{text}': {e}")

    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å NameDetector: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PRODUCTION RUNTIME")
    print("="*50)

    test_production_config()
    test_morphology_adapter()
    test_normalization_flags()
    test_full_normalization()
    test_smart_filter()

    print("\n" + "="*50)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")