#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç AC –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è Ulianova
"""

def test_manual_patterns():
    """–ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"""

    print("üîç –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê AC –ü–ê–¢–¢–ï–†–ù–û–í")
    print("=" * 60)

    name = "Ulianova Liudmyla Oleksandrivna"
    search_query = "Liudmyla Ulianova"

    print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è: {name}")
    print(f"–ü–æ–∏—Å–∫: {search_query}")

    # –û–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    expected_patterns = [
        # –ü–æ–ª–Ω–æ–µ –∏–º—è
        "Ulianova Liudmyla Oleksandrivna",
        "ULIANOVA LIUDMYLA OLEKSANDRIVNA",
        "ulianova liudmyla oleksandrivna",

        # –ë–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞
        "Ulianova Liudmyla",
        "ULIANOVA LIUDMYLA",
        "ulianova liudmyla",

        # –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
        "Liudmyla Ulianova Oleksandrivna",
        "LIUDMYLA ULIANOVA OLEKSANDRIVNA",
        "liudmyla ulianova oleksandrivna",

        "Liudmyla Ulianova",
        "LIUDMYLA ULIANOVA",
        "liudmyla ulianova",

        # –ò–Ω–∏—Ü–∏–∞–ª—ã
        "Ulianova L. O.",
        "Ulianova L.",
        "L. Ulianova",
    ]

    print(f"\nüìä –û–ñ–ò–î–ê–ï–ú–´–ï –ü–ê–¢–¢–ï–†–ù–´ ({len(expected_patterns)}):")
    for i, pattern in enumerate(expected_patterns, 1):
        print(f"   {i:2d}. {pattern}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –ø–æ–∫—Ä—ã–≤–∞—é—Ç –Ω–∞—à –∑–∞–ø—Ä–æ—Å
    matching = []
    for pattern in expected_patterns:
        if search_query.lower() == pattern.lower():
            matching.append(pattern)

    print(f"\nüéØ –î–û–õ–ñ–ù–´ –ù–ê–•–û–î–ò–¢–¨ –ù–ê–® –ó–ê–ü–†–û–° ({len(matching)}):")
    for pattern in matching:
        print(f"   ‚úÖ {pattern}")

    if not matching:
        print("   ‚ùå –ù–∏ –æ–¥–∏–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ—Ç –Ω–∞—à –∑–∞–ø—Ä–æ—Å!")
        print("   üîß –ó–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")

    return matching

def test_load_actual_patterns():
    """–ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""

    print(f"\nüîç –ó–ê–ì–†–£–ó–ö–ê –†–ï–ê–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:")
    print("=" * 60)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    import glob
    import json

    pattern_files = glob.glob('/Users/dariapavlova/Desktop/ai-service/**/*pattern*.json', recursive=True)

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(pattern_files)}")

    for file_path in pattern_files:
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)

                if isinstance(data, list):
                    patterns = data
                elif isinstance(data, dict):
                    patterns = data.get('patterns', [])
                else:
                    continue

                print(f"\nüìÑ {file_path.split('/')[-1]}: {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")

                # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Ulianova –∏–ª–∏ Liudmyla
                ulianova_patterns = []
                for pattern in patterns[:1000]:  # –ü–µ—Ä–≤—ã–µ 1000 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    pattern_str = str(pattern).lower()
                    if ('ulianova' in pattern_str and 'liudmyla' in pattern_str) or \
                       ('liudmyla' in pattern_str and 'ulianova' in pattern_str):
                        ulianova_patterns.append(str(pattern))

                if ulianova_patterns:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ Ulianova –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(ulianova_patterns)}")
                    for pattern in ulianova_patterns[:5]:
                        print(f"      {pattern}")
                    if len(ulianova_patterns) > 5:
                        print(f"      ... –∏ –µ—â–µ {len(ulianova_patterns) - 5}")
                else:
                    print(f"   ‚ùå Ulianova –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")

def main():
    matching = test_manual_patterns()
    test_load_actual_patterns()

    print(f"\nüéØ –í–´–í–û–î:")
    if matching:
        print("‚úÖ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –Ω–∞—à –∑–∞–ø—Ä–æ—Å")
        print("‚ùì –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   ‚Ä¢ AC –∏–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        print("   ‚Ä¢ Elasticsearch/AC connection issues")
    else:
        print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("üîß –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å AC generator –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–º–µ–Ω")

if __name__ == "__main__":
    main()