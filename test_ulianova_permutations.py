#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è Ulianova
"""

def test_ulianova_permutations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""

    print("üîç –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–ï–†–ï–°–¢–ê–ù–û–í–û–ö –î–õ–Ø ULIANOVA")
    print("=" * 60)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—à–µ–≥–æ –∏–º–µ–Ω–∏
    surname = "Ulianova"
    first_name = "Liudmyla"
    patronymic = "Oleksandrivna"
    language = "en"

    print(f"–§–∞–º–∏–ª–∏—è: {surname}")
    print(f"–ò–º—è: {first_name}")
    print(f"–û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")

    # –†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ AC –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞)
    permutations = [
        # F L P (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞)
        f"{first_name} {surname} {patronymic}",
        # F L (–±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞)
        f"{first_name} {surname}",
        # L F P (—Ñ–∞–º–∏–ª–∏—è –≤ –Ω–∞—á–∞–ª–µ)
        f"{surname} {first_name} {patronymic}",
        # L F (—Ñ–∞–º–∏–ª–∏—è –≤ –Ω–∞—á–∞–ª–µ, –±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞)
        f"{surname} {first_name}",
        # P F L (–æ—Ç—á–µ—Å—Ç–≤–æ –≤ –Ω–∞—á–∞–ª–µ)
        f"{patronymic} {first_name} {surname}",
        # L P F (—Ñ–∞–º–∏–ª–∏—è + –æ—Ç—á–µ—Å—Ç–≤–æ + –∏–º—è)
        f"{surname} {patronymic} {first_name}",
        # L P (—Ñ–∞–º–∏–ª–∏—è + –æ—Ç—á–µ—Å—Ç–≤–æ)
        f"{surname} {patronymic}",
    ]

    print(f"\nüìä –ì–ï–ù–ï–†–ò–†–£–ï–ú–´–ï –ü–ï–†–ï–°–¢–ê–ù–û–í–ö–ò ({len(permutations)}):")
    for i, perm in enumerate(permutations, 1):
        print(f"   {i}. {perm}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—à —Ü–µ–ª–µ–≤–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
    target_pattern = "Liudmyla Ulianova"  # –¢–æ —á—Ç–æ –∏—â–µ–º –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–º–æ–≥–ª–∏—Ñ–æ–≤

    print(f"\nüéØ –¶–ï–õ–ï–í–û–ô –ü–ê–¢–¢–ï–†–ù: '{target_pattern}'")

    found = False
    for perm in permutations:
        if perm == target_pattern:
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù: '{perm}'")
            found = True
            break

    if not found:
        print(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù –≤ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö!")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫
    found_case_insensitive = False
    for perm in permutations:
        if perm.lower() == target_pattern.lower():
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù (case-insensitive): '{perm}'")
            found_case_insensitive = True

    if not found_case_insensitive:
        print(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù –¥–∞–∂–µ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞!")

    return found or found_case_insensitive

def test_ac_generator_directly():
    """–ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—ã–∑–≤–∞—Ç—å AC –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é"""

    print(f"\nüîß –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –í–´–ó–û–í–ê AC –ì–ï–ù–ï–†–ê–¢–û–†–ê:")
    print("=" * 60)

    try:
        import sys
        sys.path.append('/Users/dariapavlova/Desktop/ai-service/src')

        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        from ai_service.layers.variants.templates.high_recall_ac_generator import HighRecallACGenerator

        generator = HighRecallACGenerator()

        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç - –Ω–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è
        test_name = "Ulianova Liudmyla Oleksandrivna"

        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: '{test_name}'")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = generator.generate_high_recall_patterns(test_name, language="en")

        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")

        # –ò—â–µ–º –Ω–∞—à —Ü–µ–ª–µ–≤–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
        target_pattern = "Liudmyla Ulianova"
        found_patterns = []

        for pattern in patterns:
            pattern_str = getattr(pattern, 'pattern', str(pattern))
            if target_pattern.lower() in pattern_str.lower():
                found_patterns.append(pattern_str)

        if found_patterns:
            print(f"‚úÖ –ù–ê–ô–î–ï–ù–û –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å '{target_pattern}': {len(found_patterns)}")
            for i, pattern in enumerate(found_patterns[:5], 1):
                print(f"   {i}. {pattern}")
        else:
            print(f"‚ùå –ù–ò –û–î–ù–û–ì–û –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å '{target_pattern}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

            # –ü–æ–∫–∞–∂–µ–º —á—Ç–æ –≤–æ–æ–±—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
            print(f"\nüìã –ü–†–ò–ú–ï–†–´ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:")
            for i, pattern in enumerate(patterns[:10], 1):
                pattern_str = getattr(pattern, 'pattern', str(pattern))
                print(f"   {i}. {pattern_str}")

    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    found_manual = test_ulianova_permutations()
    test_ac_generator_directly()

    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if found_manual:
        print("‚úÖ –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚ùì –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   ‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        print("   ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print("   ‚Ä¢ AC –∏–Ω–¥–µ–∫—Å –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫")

if __name__ == "__main__":
    main()