# Multi-stage build for AI Service with Elasticsearch support
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Install Poetry
RUN pip install poetry

# Copy Poetry files
COPY pyproject.toml poetry.lock ./

# Configure Poetry
RUN poetry config virtualenvs.create false

# First install all dependencies via pip (more reliable)
RUN pip install --no-cache-dir \
    fastapi>=0.116.1 \
    uvicorn[standard]>=0.35.0 \
    pydantic>=2.11.7 \
    pydantic-settings>=2.10.1 \
    pyahocorasick>=2.2.0 \
    sentence-transformers>=5.1.0 \
    scipy>=1.14.0 \
    numpy>=1.24.0 \
    pymorphy3>=2.0.4 \
    pymorphy3-dicts-uk>=2.4.1.1.1663094765 \
    pymorphy3-dicts-ru>=2.4.417150.4580142 \
    pyyaml>=6.0.2 \
    httpx>=0.27.0 \
    nameparser>=1.1.0 \
    elasticsearch==8.11.0 \
    elastic-transport==8.10.0 \
    prometheus-client>=0.19.0 \
    rapidfuzz>=3.5.0 \
    spacy>=3.7.0 \
    transliterate>=1.10.2

# Then run poetry install for any remaining dependencies
RUN poetry install --only=main --no-root

# Verify all critical dependencies are installed
RUN python -c "
import nameparser; print('âœ… nameparser installed')
import rapidfuzz; print('âœ… rapidfuzz installed')
import spacy; print('âœ… spacy installed')
import transliterate; print('âœ… transliterate installed')
import prometheus_client; print('âœ… prometheus_client installed')
print('ðŸŽ‰ All dependencies verified!')
"

# Install spaCy models (optional, fail silently if not available)
RUN python -m spacy download en_core_web_sm || echo "English model not available" && \
    python -m spacy download ru_core_news_sm || echo "Russian model not available" && \
    python -m spacy download uk_core_news_sm || echo "Ukrainian model not available"

# Copy application code
COPY . .

# Copy production environment file
COPY env.production.maximum_relevancy .env

# Create logs directory for logging config
RUN mkdir -p logs && chmod 755 logs

# Create non-root user
RUN useradd --create-home --shell /bin/bash app && \
    chown -R app:app /app
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["poetry", "run", "uvicorn", "src.ai_service.main:app", "--host", "0.0.0.0", "--port", "8000"]
