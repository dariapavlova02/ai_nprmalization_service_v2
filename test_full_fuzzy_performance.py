#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ fuzzy search —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º 20,000 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
–∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ.
"""

import sys
import time
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_full_fuzzy_performance():
    """–¢–µ—Å—Ç fuzzy search —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ."""
    print("üîç –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò FUZZY SEARCH")
    print("=" * 60)

    try:
        from ai_service.layers.search.sanctions_data_loader import SanctionsDataLoader
        from ai_service.layers.search.fuzzy_search_service import FuzzySearchService, FuzzyConfig

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π dataset
        loader = SanctionsDataLoader()
        await loader.clear_cache()

        fuzzy_candidates = await loader.get_fuzzy_candidates()
        print(f"üìä Loaded {len(fuzzy_candidates)} fuzzy candidates")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20,000 –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
        limited_candidates = fuzzy_candidates[:20000]
        print(f"üîí Limited to {len(limited_candidates)} candidates (like production)")

        # –°–æ–∑–¥–∞–µ–º fuzzy service —Å production –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        fuzzy_config = FuzzyConfig(
            min_score_threshold=0.5,   # Production threshold
            high_confidence_threshold=0.80,
            partial_match_threshold=0.70,
            enable_name_fuzzy=True,
            name_boost_factor=1.2,
            max_candidates=1000,  # –í–∞–∂–Ω–æ! –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            max_results=50
        )

        fuzzy_service = FuzzySearchService(fuzzy_config)
        query = "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"

        # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º 20,000
        print(f"\nüß™ –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º {len(limited_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º...")
        start_time = time.time()

        results = await fuzzy_service.search_async(
            query=query,
            candidates=limited_candidates
        )

        elapsed_time = time.time() - start_time
        print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {elapsed_time:.2f}s")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(results)}")
        for result in results[:5]:
            print(f"     - {result.matched_text} (score: {result.score:.3f})")

        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        print(f"\nüß™ –¢–µ—Å—Ç 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫...")
        optimized_config = FuzzyConfig(
            min_score_threshold=0.4,   # –ï—â–µ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥
            high_confidence_threshold=0.75,
            partial_match_threshold=0.65,
            enable_name_fuzzy=True,
            name_boost_factor=1.3,
            max_candidates=2000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç candidates
            max_results=100,
            enable_preprocessing=True
        )

        optimized_service = FuzzySearchService(optimized_config)
        start_time = time.time()

        results_opt = await optimized_service.search_async(
            query=query,
            candidates=limited_candidates
        )

        elapsed_time = time.time() - start_time
        print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {elapsed_time:.2f}s")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(results_opt)}")
        for result in results_opt[:5]:
            print(f"     - {result.matched_text} (score: {result.score:.3f})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ö–æ–≤—Ä–∏–∫–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        kovrykov_found = any("–∫–æ–≤—Ä–∏–∫–æ–≤" in r.matched_text.lower() for r in results_opt)
        print(f"\nüéØ '–ö–æ–≤—Ä–∏–∫–æ–≤' –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {kovrykov_found}")

        return len(results_opt) > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ PRODUCTION FUZZY PERFORMANCE TEST")
    print("=" * 50)

    success = await test_full_fuzzy_performance()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: Fuzzy search —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    else:
        print("‚ùå FAILURE: –ü—Ä–æ–±–ª–µ–º—ã —Å fuzzy search –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)