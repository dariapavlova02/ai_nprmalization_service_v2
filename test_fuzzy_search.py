#!/usr/bin/env python3
"""
Test script for fuzzy search functionality.
"""

import asyncio
import json
import time
from src.ai_service.layers.search.fuzzy_search_service import FuzzySearchService, FuzzyConfig, fuzzy_match_names

async def test_fuzzy_search():
    """Test fuzzy search for typos and misspellings."""
    print("üîç Testing Fuzzy Search for Typo Tolerance")
    print("="*60)

    # Test data with typos
    test_cases = [
        ("–ü–æ—Ä–æ—à–µ–Ω–∫ –ü–µ—Ç—Ä–æ", ["–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ", "–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π", "–Æ–ª—ñ—è –¢–∏–º–æ—à–µ–Ω–∫–æ"]),
        ("–ó–µ–ª–µ–Ω—Å–∫–π –í–ª–∞–¥–∏–º–∏—Ä", ["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π", "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ", "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω"]),
        ("–¢–∏–º–æ—à–µ–Ω–∫ –Æ–ª–∏—è", ["–Æ–ª—ñ—è –¢–∏–º–æ—à–µ–Ω–∫–æ", "–Æ–ª–∏—è –¢–∏–º–æ—à–µ–Ω–∫–æ", "–ö–∞—Ç–µ—Ä–∏–Ω–∞ –®–µ–≤—á–µ–Ω–∫–æ"]),
        ("–ö–∞—Ç—Ä–∏–Ω–∞", ["–ö–∞—Ç–µ—Ä–∏–Ω–∞", "–ö–∞—Ç–µ—Ä–∏–Ω–∞ –®–µ–≤—á–µ–Ω–∫–æ", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"]),
        ("–ù–∞–≤–∞–ª–Ω—ã–π", ["–ê–ª–µ–∫—Å–µ–π –ù–∞–≤–∞–ª—å–Ω—ã–π", "–ú–∏—Ö–∞–∏–ª –ù–∞–≤–∞–ª—å–Ω—ã–π", "–ò–≥–æ—Ä—å –ü–µ—Ç—Ä–æ–≤"]),
    ]

    # Initialize fuzzy search service
    config = FuzzyConfig(
        min_score_threshold=0.6,
        high_confidence_threshold=0.85,
        enable_name_fuzzy=True,
        name_boost_factor=1.2
    )

    fuzzy_service = FuzzySearchService(config)

    if not fuzzy_service.enabled:
        print("‚ùå Fuzzy search not available - install rapidfuzz:")
        print("   pip install rapidfuzz")
        return

    print(f"‚úÖ Fuzzy search service initialized")
    print(f"   Min score threshold: {config.min_score_threshold}")
    print(f"   High confidence threshold: {config.high_confidence_threshold}")
    print("")

    for i, (query, candidates) in enumerate(test_cases, 1):
        print(f"TEST CASE {i}: '{query}'")
        print("-" * 40)

        # Test async fuzzy search
        start_time = time.time()
        results = await fuzzy_service.search_async(query, candidates)
        search_time = (time.time() - start_time) * 1000

        print(f"Query: '{query}'")
        print(f"Candidates: {candidates}")
        print(f"Results ({len(results)} found in {search_time:.2f}ms):")

        if results:
            for j, result in enumerate(results[:3], 1):  # Show top 3
                print(f"  {j}. '{result.matched_text}' - Score: {result.score:.3f} (Algorithm: {result.algorithm})")

            best_match = results[0]
            if best_match.score >= config.high_confidence_threshold:
                print(f"  ‚úÖ HIGH CONFIDENCE match: '{best_match.matched_text}' ({best_match.score:.3f})")
            elif best_match.score >= config.min_score_threshold:
                print(f"  ‚ö†Ô∏è  MEDIUM match: '{best_match.matched_text}' ({best_match.score:.3f})")
            else:
                print(f"  ‚ùå LOW confidence: '{best_match.matched_text}' ({best_match.score:.3f})")
        else:
            print("  ‚ùå No matches found")

        print("")

    # Test quick fuzzy matching function
    print("TESTING QUICK FUZZY FUNCTION")
    print("-" * 40)

    quick_candidates = [
        "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ", "–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π", "–Æ–ª—ñ—è –¢–∏–º–æ—à–µ–Ω–∫–æ",
        "–í—ñ—Ç–∞–ª—ñ–π –ö–ª–∏—á–∫–æ", "–Ü–≥–æ—Ä –ö–æ–ª–æ–º–æ–π—Å—å–∫–∏–π", "–ê–ª–µ–∫—Å–µ–π –ù–∞–≤–∞–ª—å–Ω—ã–π"
    ]

    quick_query = "–ü–æ—Ä–æ—à–µ–Ω–∫"
    quick_results = fuzzy_match_names(quick_query, quick_candidates, threshold=0.6, limit=5)

    print(f"Quick search for '{quick_query}':")
    for name, score in quick_results:
        print(f"  '{name}' - {score:.3f}")

    print("")

    # Performance test
    print("PERFORMANCE TEST")
    print("-" * 40)

    large_candidates = []
    for i in range(1000):
        large_candidates.extend([
            f"–Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ {i}",
            f"–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞ {i}",
            f"–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–æ–≤–∞–ª–µ–Ω–∫–æ {i}",
            f"–ö–∞—Ç–µ—Ä–∏–Ω–∞ –®–µ–≤—á–µ–Ω–∫–æ {i}",
        ])

    perf_query = "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ 500"
    start_time = time.time()
    perf_results = await fuzzy_service.search_async(perf_query, large_candidates[:5000])  # Limit for test
    perf_time = (time.time() - start_time) * 1000

    print(f"Performance test: {len(large_candidates[:5000])} candidates")
    print(f"Query: '{perf_query}'")
    print(f"Time: {perf_time:.2f}ms")
    print(f"Results: {len(perf_results)}")
    if perf_results:
        print(f"Best match: '{perf_results[0].matched_text}' - {perf_results[0].score:.3f}")

    print("")

    # Algorithm comparison test
    print("ALGORITHM COMPARISON TEST")
    print("-" * 40)

    try:
        import rapidfuzz
        from rapidfuzz import fuzz

        test_query = "–ü–æ—Ä–æ—à–µ–Ω–∫ –ü–µ—Ç—Ä–æ"
        test_candidate = "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"

        algorithms = [
            ("ratio", fuzz.ratio),
            ("partial_ratio", fuzz.partial_ratio),
            ("token_sort_ratio", fuzz.token_sort_ratio),
            ("token_set_ratio", fuzz.token_set_ratio),
        ]

        print(f"Comparing algorithms for '{test_query}' vs '{test_candidate}':")
        for name, algo in algorithms:
            score = algo(test_query, test_candidate) / 100.0
            print(f"  {name:20}: {score:.3f}")

    except ImportError:
        print("rapidfuzz not available for algorithm comparison")

    # Test statistics
    print("")
    print("FUZZY SERVICE STATISTICS")
    print("-" * 40)
    stats = fuzzy_service.get_stats()
    print(json.dumps(stats, indent=2))

if __name__ == "__main__":
    print("üß™ Fuzzy Search Testing Suite")
    print("==============================")
    asyncio.run(test_fuzzy_search())