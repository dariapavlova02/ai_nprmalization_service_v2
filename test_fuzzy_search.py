#!/usr/bin/env python3
"""
–¢–µ—Å—Ç fuzzy –ø–æ–∏—Å–∫–∞ –¥–ª—è –≥–æ–º–æ–≥–ª–∏—Ñ-—Å–ª—É—á–∞—è
"""

from fuzzywuzzy import fuzz
import sys

def test_fuzzy_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º fuzzy –ø–æ–∏—Å–∫ –≤—Ä—É—á–Ω—É—é"""

    query = "Liudmyla Ulianova"
    target = "Ulianova Liudmyla Oleksandrivna"

    print("üîç –¢–ï–°–¢ FUZZY –ü–û–ò–°–ö–ê")
    print("=" * 50)
    print(f"Query: '{query}'")
    print(f"Target: '{target}'")
    print()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã fuzzy
    scores = {
        "ratio": fuzz.ratio(query, target),
        "partial_ratio": fuzz.partial_ratio(query, target),
        "token_sort_ratio": fuzz.token_sort_ratio(query, target),
        "token_set_ratio": fuzz.token_set_ratio(query, target),
    }

    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for algo, score in scores.items():
        print(f"  {algo:18}: {score:3d} ({score/100:.3f})")

    print()
    best_algo = max(scores, key=scores.get)
    best_score = scores[best_algo]

    print(f"üèÜ –õ–£–ß–®–ò–ô: {best_algo} = {best_score} ({best_score/100:.3f})")
    print(f"‚úÖ –ü–æ—Ä–æ–≥ 65%: {'PASS' if best_score >= 65 else 'FAIL'}")
    print(f"‚úÖ –ü–æ—Ä–æ–≥ 80%: {'PASS' if best_score >= 80 else 'FAIL'}")

    return best_score / 100

def test_other_candidates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã"""

    query = "Liudmyla Ulianova"

    # –ü—Ä–∏–º–µ—Ä—ã –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
    other_candidates = [
        "Kerimova Hulnara Suleimanivna",
        "Mukhin Oleksii Oleksiiovych",
        "–ö–∞–≤–¥–∂–∞—Ä–∞–¥–∑–µ –ú–∞–∫—Å–∏–º –ì–µ–Ω–Ω–∞–¥—ñ–π–æ–≤–∏—á",
        "–¢—Ä—É—à–∞–Ω–æ–≤ –í–∞–ª–µ—Ä—ñ–π –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á",
        "Sulimov",  # –ò–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    ]

    print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –° –î–†–£–ì–ò–ú–ò –ö–ê–ù–î–ò–î–ê–¢–ê–ú–ò:")
    print("=" * 50)

    for candidate in other_candidates:
        score = fuzz.partial_ratio(query, candidate)
        print(f"{candidate:35}: {score:3d} ({score/100:.3f})")

    # –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç
    correct_target = "Ulianova Liudmyla Oleksandrivna"
    correct_score = fuzz.partial_ratio(query, correct_target)
    print(f"{'='*50}")
    print(f"{'–ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–ê–ù–î–ò–î–ê–¢':35}: {correct_score:3d} ({correct_score/100:.3f})")

    return correct_score / 100

def main():
    best_score = test_fuzzy_search()
    correct_score = test_other_candidates()

    print(f"\nüéØ –í–´–í–û–î:")
    print(f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–∫–æ—Ä–∏—Ç—å: {correct_score:.3f}")
    print(f"   ‚Ä¢ –ï—Å–ª–∏ fuzzy –Ω–∞—Ö–æ–¥–∏—Ç 'Kerimova' –≤–º–µ—Å—Ç–æ 'Ulianova' - —ç—Ç–æ –±–∞–≥ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–µ")
    print(f"   ‚Ä¢ –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")

if __name__ == "__main__":
    main()