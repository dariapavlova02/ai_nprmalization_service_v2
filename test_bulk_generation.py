#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import json
import time
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

from bulk_template_generator import BulkTemplateGenerator

def main():
    print("üß™ –¢–ï–°–¢–û–í–ê–Ø –ú–ê–°–°–û–í–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –®–ê–ë–õ–û–ù–û–í")
    print("=" * 60)

    generator = BulkTemplateGenerator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    with open('src/ai_service/data/sanctioned_persons.json', 'r', encoding='utf-8') as f:
        all_persons = json.load(f)
    persons = all_persons[:10]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10

    with open('src/ai_service/data/sanctioned_companies.json', 'r', encoding='utf-8') as f:
        all_companies = json.load(f)
    companies = all_companies[:5]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5

    with open('src/ai_service/data/terrorism_black_list.json', 'r', encoding='utf-8') as f:
        all_terrorists = json.load(f)
    terrorists = all_terrorists[:5]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  - –°–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω—ã: {len(persons)}")
    print(f"  - –°–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏: {len(companies)}")
    print(f"  - –¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã: {len(terrorists)}")

    start_time = time.time()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    all_patterns = []

    # –ü–µ—Ä—Å–æ–Ω—ã
    print(f"\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω...")
    for i, person in enumerate(persons, 1):
        names = generator.extract_person_names(person)
        if names:
            patterns = generator.generate_patterns_for_entity(names, 'persons', person)
            all_patterns.extend(patterns)
            print(f"  {i}. {person.get('name', 'N/A')}: {len(patterns)} —à–∞–±–ª–æ–Ω–æ–≤")

    # –¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã
    print(f"\nüíÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–æ–≤...")
    for i, terrorist in enumerate(terrorists, 1):
        names = generator.extract_terrorist_names(terrorist)
        if names:
            patterns = generator.generate_patterns_for_entity(names, 'terrorists', terrorist)
            all_patterns.extend(patterns)
            print(f"  {i}. {terrorist.get('aka_name', 'N/A')}: {len(patterns)} —à–∞–±–ª–æ–Ω–æ–≤")

    # –ö–æ–º–ø–∞–Ω–∏–∏
    print(f"\nüè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π...")
    for i, company in enumerate(companies, 1):
        names = generator.extract_company_names(company)
        if names:
            patterns = generator.generate_patterns_for_entity(names, 'companies', company)
            all_patterns.extend(patterns)
            print(f"  {i}. {company.get('name', 'N/A')}: {len(patterns)} —à–∞–±–ª–æ–Ω–æ–≤")

    total_time = time.time() - start_time

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(persons) + len(companies) + len(terrorists)}")
    print(f"  –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(all_patterns):,}")
    print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫")
    print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {(len(persons) + len(companies) + len(terrorists))/total_time:.1f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤
    if all_patterns:
        print(f"\nüîç –ü–†–ò–ú–ï–†–´ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–• –®–ê–ë–õ–û–ù–û–í:")
        for i, pattern in enumerate(all_patterns[:10], 1):
            print(f"  {i}. {pattern.pattern} ({pattern.pattern_type})")

    # –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    test_output = f"test_patterns_{timestamp}.json"
    generator.export_patterns(all_patterns, test_output)
    print(f"\nüíæ –¢–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {test_output}")

if __name__ == "__main__":
    main()