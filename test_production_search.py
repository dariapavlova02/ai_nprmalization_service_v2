#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –¥–ª—è "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω" ‚Üí "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω".
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_production_search():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ fuzzy search –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ."""
    print("üîç –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ù –ü–û–ò–°–ö–ê")
    print("=" * 60)

    try:
        # –°–æ–∑–¥–∞–µ–º HybridSearchService —Å –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥–æ–º
        from ai_service.layers.search.config import HybridSearchConfig
        from ai_service.layers.search.hybrid_search_service import HybridSearchService
        from ai_service.layers.search.contracts import SearchOpts, SearchMode

        search_config = HybridSearchConfig.from_env()
        print(f"üìä Elasticsearch hosts: {search_config.elasticsearch.hosts}")

        search_service = HybridSearchService(search_config)
        search_service.initialize()

        print("‚úÖ HybridSearchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fuzzy candidates
        print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ fuzzy candidates...")
        fuzzy_candidates = await search_service._get_fuzzy_candidates()
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(fuzzy_candidates)}")

        # –ü–æ–∏—Å–∫ –ö–æ–≤—Ä–∏–∫–æ–≤ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö
        kovrykov_candidates = [c for c in fuzzy_candidates if "–∫–æ–≤—Ä–∏–∫–æ–≤" in c.lower()]
        print(f"   '–ö–æ–≤—Ä–∏–∫–æ–≤' –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(kovrykov_candidates)}")
        for candidate in kovrykov_candidates[:3]:
            print(f"     - {candidate}")

        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "–†–æ–º–∞–Ω"
        roman_candidates = [c for c in fuzzy_candidates
                          if "—Ä–æ–º–∞–Ω" in c.lower() and "–∫–æ–≤—Ä" in c.lower()]
        print(f"   '–†–æ–º–∞–Ω + –ö–æ–≤—Ä*' –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(roman_candidates)}")
        for candidate in roman_candidates[:3]:
            print(f"     - {candidate}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fuzzy search
        print("\n2. –¢–µ—Å—Ç fuzzy search...")
        query_text = "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"
        search_opts = SearchOpts(
            top_k=10,
            threshold=0.4,  # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
            search_mode=SearchMode.HYBRID,
            enable_escalation=True,
            escalation_threshold=0.8
        )

        # –ü—Ä—è–º–æ–π fuzzy search
        fuzzy_results = await search_service._fuzzy_search(
            query_text=query_text,
            opts=search_opts,
            search_trace=None
        )
        print(f"   Fuzzy —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(fuzzy_results)}")
        for result in fuzzy_results[:5]:
            print(f"     - {result.text} (score: {result.score:.3f})")

        # –ï—Å–ª–∏ fuzzy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        if not fuzzy_results:
            print("\n3. –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞...")
            test_queries = [
                "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω",
                "–†–æ–º–∞–Ω –ö–æ–≤—Ä–∏–∫–æ–≤",
                "–ö–æ–≤—Ä–∏–∫–æ–≤",
                "–†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á",
                "Roman Kovrykov"
            ]

            for test_query in test_queries:
                print(f"\n   –¢–µ—Å—Ç: '{test_query}'")
                fuzzy_results = await search_service._fuzzy_search(
                    query_text=test_query,
                    opts=search_opts,
                    search_trace=None
                )
                print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(fuzzy_results)}")
                if fuzzy_results:
                    for result in fuzzy_results[:3]:
                        print(f"       - {result.text} (score: {result.score:.3f})")

        return len(fuzzy_results) > 0

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–î–ê–ö–®–ù –ü–û–ò–°–ö–ê")
    print("=" * 50)

    success = await test_production_search()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: –ü—Ä–æ–¥–∞–∫—à–Ω –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå FAILURE: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–¥–∞–∫—à–Ω –ø–æ–∏—Å–∫–æ–º")
        print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print("   1. '–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω' –Ω–µ—Ç –≤ sanctions data")
        print("   2. Fuzzy threshold —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π")
        print("   3. –ò–º—è –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤ –±–∞–∑–µ")
        print("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å Elasticsearch –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)