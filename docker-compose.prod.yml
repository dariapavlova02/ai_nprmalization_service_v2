version: '3.8'

services:
  ai-service:
    build:
      context: .
      dockerfile: Dockerfile.search
    container_name: ai-service-prod
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - WORKERS=4
      - DEBUG=false
      - ELASTICSEARCH_HOSTS=http://95.217.84.234:9200
      - ENABLE_ELASTICSEARCH_AUTH=true
      - ENABLE_SEARCH_CACHE=true
      - SEARCH_CACHE_SIZE=2000
      - QUERY_CACHE_SIZE=5000
    env_file:
      - env.production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - cluster.name=ai-service-cluster
      - node.name=ai-service-node
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana-prod
    environment:
      - ELASTICSEARCH_HOSTS=http://95.217.84.234:9200
      - SERVER_NAME=kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - monitoring

  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-service
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  elasticsearch_data:
    driver: local
