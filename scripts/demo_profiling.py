#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è AI Service.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
–Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –Ω–∞–±–æ—Ä–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))

from ai_service.layers.normalization.normalization_service import NormalizationService
from ai_service.utils.profiling import (
    profile_time, profile_memory, profile_function, 
    get_profiling_stats, print_profiling_report, clear_profiling_stats
)


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
DEMO_PHRASES = [
    "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
    "–û–û–û '–†–æ–º–∞—à–∫–∞' –ò–≤–∞–Ω –ò.",
    "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ",
    "John Smith",
    "–ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
]


@profile_function("demo.process_phrase")
async def process_phrase(service: NormalizationService, phrase: str) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    start_time = time.time()
    
    with profile_time("demo.normalize_async"):
        result = await service.normalize_async(
            phrase,
            language="auto",
            remove_stop_words=True,
            preserve_names=True,
            enable_advanced_features=True
        )
    
    processing_time = time.time() - start_time
    
    return {
        'phrase': phrase,
        'normalized': result.normalized,
        'success': result.success,
        'processing_time': processing_time,
        'tokens': result.tokens,
        'errors': result.errors
    }


async def demo_basic_profiling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("-" * 50)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    clear_profiling_stats()
    
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å
    service = NormalizationService()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—ã
    results = []
    for phrase in DEMO_PHRASES:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: '{phrase}'")
        
        with profile_time("demo.phrase_processing"):
            result = await process_phrase(service, phrase)
            results.append(result)
        
        print(f"  ‚Üí '{result['normalized']}' ({result['processing_time']:.4f}s)")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print_profiling_report()
    
    return results


async def demo_memory_profiling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏."""
    print("\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
    print("-" * 50)
    
    service = NormalizationService()
    
    # –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã
    for phrase in DEMO_PHRASES:
        print(f"–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è: '{phrase}'")
        
        with profile_memory("demo.memory_processing"):
            result = await service.normalize_async(
                phrase,
                language="auto",
                remove_stop_words=True,
                preserve_names=True,
                enable_advanced_features=True
            )
        
        print(f"  ‚Üí '{result.normalized}'")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏
    stats = get_profiling_stats()
    memory_trackers = stats.get('memory_trackers', {})
    
    if memory_trackers:
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏:")
        for name, tracker_stats in memory_trackers.items():
            print(f"  {name}:")
            print(f"    –°–Ω–∏–º–∫–æ–≤: {tracker_stats['snapshots']}")
            print(f"    –ü–∏–∫ –ø–∞–º—è—Ç–∏: {tracker_stats['peak_memory']} –±–∞–π—Ç")
            print(f"    –°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å: {tracker_stats['avg_memory']:.0f} –±–∞–π—Ç")


def demo_performance_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print("\n‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("-" * 50)
    
    service = NormalizationService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    configurations = [
        ("–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", True, True, True),
        ("–ë–µ–∑ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏", True, True, False),
        ("–ë–µ–∑ —Å—Ç–æ–ø-—Å–ª–æ–≤", False, True, True),
        ("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", False, False, False)
    ]
    
    for config_name, remove_stop_words, preserve_names, enable_advanced in configurations:
        print(f"\n{config_name}:")
        
        total_time = 0
        for phrase in DEMO_PHRASES:
            start_time = time.time()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            result = service.normalize_sync(
                phrase,
                language="auto",
                remove_stop_words=remove_stop_words,
                preserve_names=preserve_names,
                enable_advanced_features=enable_advanced
            )
            
            processing_time = time.time() - start_time
            total_time += processing_time
            
            print(f"  '{phrase}' ‚Üí '{result.normalized}' ({processing_time:.4f}s)")
        
        avg_time = total_time / len(DEMO_PHRASES)
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.4f}s")


async def demo_error_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("\nüö® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("-" * 50)
    
    service = NormalizationService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    error_cases = [
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "   ",  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
        "a" * 10001,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        None,  # None (–±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Å—Ç—Ä–æ–∫—É)
    ]
    
    for case in error_cases:
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {repr(case)}")
        
        try:
            with profile_time("demo.error_handling"):
                result = await service.normalize_async(
                    str(case) if case is not None else "",
                    language="auto",
                    remove_stop_words=True,
                    preserve_names=True,
                    enable_advanced_features=True
                )
            
            print(f"  ‚Üí –£—Å–ø–µ—Ö: {result.success}")
            if result.errors:
                print(f"  ‚Üí –û—à–∏–±–∫–∏: {result.errors}")
            print(f"  ‚Üí –í—Ä–µ–º—è: {result.processing_time:.4f}s")
            
        except Exception as e:
            print(f"  ‚Üí –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


def demo_statistics_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫."""
    print("\nüìà –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
    print("-" * 50)
    
    stats = get_profiling_stats()
    
    # –ê–Ω–∞–ª–∏–∑ —Å—á—ë—Ç—á–∏–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
    counters = stats.get('counters', {})
    if counters:
        print("–°—á—ë—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
        sorted_counters = sorted(
            counters.items(),
            key=lambda x: x[1]['total_time'],
            reverse=True
        )
        
        for name, counter_stats in sorted_counters:
            print(f"  {name}:")
            print(f"    –í—ã–∑–æ–≤–æ–≤: {counter_stats['calls']}")
            print(f"    –û–±—â–µ–µ –≤—Ä–µ–º—è: {counter_stats['total_time']:.4f}s")
            print(f"    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {counter_stats['avg_time']:.6f}s")
            print(f"    P50: {counter_stats['p50_time']:.6f}s")
            print(f"    P95: {counter_stats['p95_time']:.6f}s")
            print()
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –ø–∞–º—è—Ç–∏
    memory_trackers = stats.get('memory_trackers', {})
    if memory_trackers:
        print("–¢—Ä–µ–∫–µ—Ä—ã –ø–∞–º—è—Ç–∏:")
        
        for name, tracker_stats in memory_trackers.items():
            print(f"  {name}:")
            print(f"    –°–Ω–∏–º–∫–æ–≤: {tracker_stats['snapshots']}")
            print(f"    –ü–∏–∫ –ø–∞–º—è—Ç–∏: {tracker_stats['peak_memory']} –±–∞–π—Ç")
            print(f"    –°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å: {tracker_stats['avg_memory']:.0f} –±–∞–π—Ç")
            print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è AI Service")
    print("=" * 60)
    
    try:
        # –ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        await demo_basic_profiling()
        
        # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        await demo_memory_profiling()
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        demo_performance_comparison()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        await demo_error_handling()
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        demo_statistics_analysis()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("  make -f Makefile.profile profile-quick")
        print("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print("  make -f Makefile.profile show-profile")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
