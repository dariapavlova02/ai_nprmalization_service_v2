#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. DIMINUTIVE_VARIANT - —á–∏—Å—Ç—ã–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
2. INITIALS_EVERYWHERE - –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
3. TRANSLITERATION_VARIANT - Title Case –≤–∞—Ä–∏–∞–Ω—Ç—ã
4. –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä - –æ—á–∏—Å—Ç–∫–∞ –º—É—Å–æ—Ä–∞
"""

import sys
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

from ai_service.layers.variants.templates.high_recall_ac_generator import HighRecallACGenerator


def test_diminutive_improvements():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π DIMINUTIVE_VARIANT"""
    print("=== –¢–µ—Å—Ç DIMINUTIVE_VARIANT ===")
    generator = HighRecallACGenerator()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –∏–º—è –∫–∞–∫ –æ—Å–Ω–æ–≤—É
    test_name = "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á"

    diminutives = generator._generate_diminutive_variants(test_name, "uk")

    print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è: {test_name}")
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–º–∏–Ω—É—Ç–∏–≤—ã ({len(diminutives)}):")
    for i, dim in enumerate(diminutives, 1):
        print(f"  {i}. {dim}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
    mixed_scripts = [d for d in diminutives if generator._has_mixed_script(d)]
    if mixed_scripts:
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: {mixed_scripts}")
    else:
        print("‚úÖ –ù–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤")

    return diminutives


def test_initials_improvements():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π INITIALS_EVERYWHERE"""
    print("\n=== –¢–µ—Å—Ç INITIALS_EVERYWHERE ===")
    generator = HighRecallACGenerator()

    test_name = "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á"

    initials = generator._generate_shortened_variants(test_name, "uk")

    print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è: {test_name}")
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª—ã ({len(initials)}):")
    for i, init in enumerate(initials, 1):
        print(f"  {i}. {init}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    expected_variants = [
        "–ö–æ–≤—Ä–∏–∫–æ–≤ –†.–í",  # –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
        "–ö–æ–≤—Ä–∏–∫–æ–≤, –†–æ–º–∞–Ω –í",  # –±–µ–∑ —Ç–æ—á–∫–∏ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    ]

    for expected in expected_variants:
        found = any(expected in init for init in initials)
        if found:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {expected}")
        else:
            print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω: {expected}")

    return initials


def test_transliteration_improvements():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π TRANSLITERATION_VARIANT"""
    print("\n=== –¢–µ—Å—Ç TRANSLITERATION_VARIANT ===")
    generator = HighRecallACGenerator()

    test_name = "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á"

    translits = generator._generate_transliteration_variants(test_name, "uk")

    print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è: {test_name}")
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ ({len(translits)}):")
    for i, translit in enumerate(translits, 1):
        print(f"  {i}. {translit}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Title Case
    title_case_variants = [t for t in translits if t.istitle()]
    print(f"‚úÖ Title Case –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(title_case_variants)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Å—Ç–≤–∞
    expected_patronyms = ["Valeriyovych", "Valeriiovych"]
    for patronym in expected_patronyms:
        found = any(patronym in t for t in translits)
        if found:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Å—Ç–≤–æ: {patronym}")
        else:
            print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç—á–µ—Å—Ç–≤–æ: {patronym}")

    return translits


def test_sanitizer():
    """–¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä–∞"""
    print("\n=== –¢–µ—Å—Ç –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä–∞ ===")
    generator = HighRecallACGenerator()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –º—É—Å–æ—Ä–æ–º
    from ai_service.layers.variants.templates.high_recall_ac_generator import RecallOptimizedPattern

    test_patterns = [
        RecallOptimizedPattern("kovrykov —Ä–æ–º–∞", "diminutive_variant", 2, 0.4, [], "mixed"),  # —Å–º–µ—à–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        RecallOptimizedPattern("–∫–æ–≤—Ä–∏–∫–æ–≤ –π—É—Ü—Ö", "typo_variant", 3, 0.3, [], "ru"),  # –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è –±–∏–≥—Ä–∞–º–º–∞
        RecallOptimizedPattern("–ö–æ–≤—Ä–∏–∫–æ–≤–∞ –†–æ–º–∞–Ω", "declension_variant", 2, 0.3, [], "ru"),  # –∂–µ–Ω—Å–∫–∞—è —Ñ–∞–º–∏–ª–∏—è + –º—É–∂—Å–∫–æ–µ –∏–º—è
        RecallOptimizedPattern("–ö–æ–≤—Ä–∏–∫–æ–≤ –†.–í.", "initials_everywhere", 2, 0.6, [], "ru"),  # –≤–∞–ª–∏–¥–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        RecallOptimizedPattern("Roma Kovrykov", "diminutive_variant", 2, 0.4, [], "en"),  # –≤–∞–ª–∏–¥–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    ]

    print("–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
    for i, pattern in enumerate(test_patterns, 1):
        print(f"  {i}. {pattern.pattern} ({pattern.pattern_type})")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä
    cleaned = generator._post_export_sanitizer(test_patterns)

    print(f"\n–ü–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä–∞ ({len(cleaned)} –∏–∑ {len(test_patterns)}):")
    for i, pattern in enumerate(cleaned, 1):
        print(f"  {i}. {pattern.pattern} ({pattern.pattern_type})")

    removed_count = len(test_patterns) - len(cleaned)
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –º—É—Å–æ—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {removed_count}")

    return cleaned


def main():
    print("üßπ –¢–µ—Å—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫ —Ö–∞–π —Ä–µ–∫–æ–ª–ª –ê–° –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("=" * 50)

    try:
        diminutives = test_diminutive_improvements()
        initials = test_initials_improvements()
        translits = test_transliteration_improvements()
        cleaned = test_sanitizer()

        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –î–∏–º–∏–Ω—É—Ç–∏–≤—ã: {len(diminutives)}")
        print(f"  - –ò–Ω–∏—Ü–∏–∞–ª—ã: {len(initials)}")
        print(f"  - –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏: {len(translits)}")
        print(f"  - –û—á–∏—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {len(cleaned)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()