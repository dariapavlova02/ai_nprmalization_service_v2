#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ª–∏ AC –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Ulianova
"""

import sys
sys.path.append('/Users/dariapavlova/Desktop/ai-service/src')

def test_ac_patterns_for_ulianova():
    """–ü—Ä–æ–≤–µ—Ä–∏–º –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–ª—É—á–∞—è"""

    print("üîç –¢–ï–°–¢ AC –ü–ê–¢–¢–ï–†–ù–û–í –î–õ–Ø ULIANOVA")
    print("=" * 60)

    # –¶–µ–ª–µ–≤–æ–µ –∏–º—è –∏–∑ —Å–∞–Ω–∫—Ü–∏–π
    target_name = "Ulianova Liudmyla Oleksandrivna"

    # –¢–æ —á—Ç–æ –∏—â–µ–º (–ø–æ—Å–ª–µ –≥–æ–º–æ–≥–ª–∏—Ñ-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    search_query = "Liudmyla Ulianova"

    print(f"üéØ –¶–µ–ª–µ–≤–æ–µ –∏–º—è: '{target_name}'")
    print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{search_query}'")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AC generator
        from ai_service.layers.variants.templates.high_recall_ac_generator_refactored import HighRecallACGenerator

        generator = HighRecallACGenerator()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        patterns = generator.generate_patterns(target_name)

        print(f"\nüìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä–æ–µ—Ç –Ω–∞—à –ø–æ–∏—Å–∫
        matching_patterns = []

        for pattern in patterns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            pattern_str = pattern if isinstance(pattern, str) else pattern.get('pattern', str(pattern))

            if search_query.lower() in pattern_str.lower():
                matching_patterns.append(pattern_str)
            elif "liudmyla" in pattern_str.lower() and "ulianova" in pattern_str.lower():
                matching_patterns.append(pattern_str)

        print(f"\nüéØ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ê–Æ–©–ò–• –ü–ê–¢–¢–ï–†–ù–û–í: {len(matching_patterns)}")

        if matching_patterns:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
            for i, pattern in enumerate(matching_patterns[:10], 1):
                print(f"   {i}. {pattern}")
            if len(matching_patterns) > 10:
                print(f"   ... –∏ –µ—â–µ {len(matching_patterns) - 10}")
        else:
            print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤!")
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
            for i, pattern in enumerate(patterns[:10], 1):
                pattern_str = pattern if isinstance(pattern, str) else str(pattern)
                print(f"   {i}. {pattern_str}")
            if len(patterns) > 10:
                print(f"   ... –∏ –µ—â–µ {len(patterns) - 10}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
        print(f"\nüîÑ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–°–¢–ê–ù–û–í–û–ö:")
        permutation_checks = [
            "Liudmyla Ulianova",
            "Ulianova Liudmyla",
            "LIUDMYLA ULIANOVA",
            "ULIANOVA LIUDMYLA",
            "liudmyla ulianova",
            "ulianova liudmyla"
        ]

        for perm in permutation_checks:
            found = False
            for pattern in patterns:
                pattern_str = pattern if isinstance(pattern, str) else str(pattern)
                if perm.lower() == pattern_str.lower().strip():
                    found = True
                    print(f"   ‚úÖ '{perm}' –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö")
                    break
            if not found:
                print(f"   ‚ùå '{perm}' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö")

    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AC generator: {e}")

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —á–∏—Ç–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
        try:
            import json
            with open('/Users/dariapavlova/Desktop/ai-service/src/high_recall_ac_patterns_sample.json', 'r') as f:
                patterns_data = json.load(f)
                patterns = patterns_data.get('patterns', [])

                print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {len(patterns)}")

                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
                matching = []
                for pattern in patterns:
                    if "liudmyla" in pattern.lower() and "ulianova" in pattern.lower():
                        matching.append(pattern)

                if matching:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ: {len(matching)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
                    for pattern in matching[:5]:
                        print(f"   {pattern}")
                else:
                    print("‚ùå –í —Ñ–∞–π–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö")

        except Exception as file_e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {file_e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    test_ac_patterns_for_ulianova()

    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("   –ï—Å–ª–∏ AC –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç 'Liudmyla Ulianova',")
    print("   —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –∞ –Ω–µ –≤ –ø–æ–∏—Å–∫–µ!")

if __name__ == "__main__":
    main()