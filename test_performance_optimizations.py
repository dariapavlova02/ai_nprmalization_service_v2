#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
"""

import asyncio
import time
from typing import List, Dict

# Test cases —Å —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
TEST_CASES = [
    # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–º–∏ —Å early returns)
    "–ü–µ—Ç—Ä–æ–≤",
    "John",
    "–ú–∞—Ä–∏—è",
    "123",
    "",

    # –°—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω—ã –≤—ã–∏–≥—Ä–∞—Ç—å –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
    "–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á",
    "John Smith",
    "–ú–∞—Ä–∏—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",

    # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ (–ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω, –Ω–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    "–û–û–û \"–†–æ–º–∞—à–∫–∞\" –ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è 01.01.1990 –ò–ù–ù 1234567890",
    "LLC John Smith DOB 1990-01-01 SSN 123-45-6789",
    "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –∑ –æ–±–º–µ–∂–µ–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—é \"–°–æ–Ω—è—à–Ω–∏–∫\" –ú–∞—Ä—ñ—è –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ",
]

async def measure_processing_time(text: str, orchestrator) -> Dict[str, float]:
    """–ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    start_time = time.time()

    try:
        result = await orchestrator.process(text)
        end_time = time.time()

        return {
            "text": text,
            "processing_time": end_time - start_time,
            "success": result.success,
            "normalized_length": len(result.normalized_text),
            "token_count": len(result.tokens),
            "error_count": len(result.errors)
        }
    except Exception as e:
        end_time = time.time()
        return {
            "text": text,
            "processing_time": end_time - start_time,
            "success": False,
            "error": str(e)
        }

async def run_performance_test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n")

    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å—Ä–µ–¥—ã
        from src.ai_service.core.unified_orchestrator import UnifiedOrchestrator
        from src.ai_service.core.orchestrator_factory import OrchestratorFactory

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        factory = OrchestratorFactory()
        orchestrator = factory.create_orchestrator()

        print("‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}")
        return

    results = []
    total_start = time.time()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π
    for i, test_case in enumerate(TEST_CASES, 1):
        print(f"üìù –¢–µ—Å—Ç {i}/{len(TEST_CASES)}: '{test_case[:50]}{'...' if len(test_case) > 50 else ''}'")

        result = await measure_processing_time(test_case, orchestrator)
        results.append(result)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result['success']:
            print(f"   ‚úÖ {result['processing_time']*1000:.1f}ms | "
                  f"tokens: {result['token_count']} | "
                  f"normalized: {result['normalized_length']} chars")
        else:
            print(f"   ‚ùå {result['processing_time']*1000:.1f}ms | "
                  f"error: {result.get('error', 'unknown')}")

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(0.1)

    total_time = time.time() - total_start

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")

    successful_results = [r for r in results if r['success']]
    failed_results = [r for r in results if not r['success']]

    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful_results)}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_results)}")

    if successful_results:
        times = [r['processing_time'] for r in successful_results]
        avg_time = sum(times) / len(times)
        max_time = max(times)
        min_time = min(times)

        print(f"\n‚è±Ô∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_time*1000:.1f}ms")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min_time*1000:.1f}ms")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max_time*1000:.1f}ms")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫:")
        fast_cases = sum(1 for t in times if t < 0.1)  # < 100ms
        medium_cases = sum(1 for t in times if 0.1 <= t < 0.5)  # 100ms-500ms
        slow_cases = sum(1 for t in times if t >= 0.5)  # >= 500ms

        print(f"   –ë—ã—Å—Ç—Ä—ã–µ (<100ms): {fast_cases}/{len(times)} ({fast_cases/len(times)*100:.1f}%)")
        print(f"   –°—Ä–µ–¥–Ω–∏–µ (100-500ms): {medium_cases}/{len(times)} ({medium_cases/len(times)*100:.1f}%)")
        print(f"   –ú–µ–¥–ª–µ–Ω–Ω—ã–µ (>=500ms): {slow_cases}/{len(times)} ({slow_cases/len(times)*100:.1f}%)")

        if avg_time < 0.5:
            print(f"   ‚úÖ –¶–µ–ª—å <500ms –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! (—Å—Ä–µ–¥–Ω–µ–µ: {avg_time*1000:.1f}ms)")
        else:
            print(f"   ‚ö†Ô∏è  –¶–µ–ª—å <500ms –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (—Å—Ä–µ–¥–Ω–µ–µ: {avg_time*1000:.1f}ms)")

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ—É–¥–∞—á–Ω—ã–º —Ç–µ—Å—Ç–∞–º
    if failed_results:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for result in failed_results:
            print(f"   '{result['text'][:30]}...': {result.get('error', 'unknown error')}")

    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def run_sync_test():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è async —Ç–µ—Å—Ç–∞"""
    try:
        asyncio.run(run_performance_test())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    run_sync_test()