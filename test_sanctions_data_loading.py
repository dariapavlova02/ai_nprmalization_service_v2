#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ sanctions data –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø–æ—á–µ–º—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
—Ç–æ–ª—å–∫–æ 26 –∑–∞–ø–∏—Å–µ–π –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_sanctions_data_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ sanctions data."""
    print("üîç –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò SANCTIONS DATA")
    print("=" * 60)

    try:
        from ai_service.layers.search.sanctions_data_loader import SanctionsDataLoader

        # –°–æ–∑–¥–∞–µ–º loader
        loader = SanctionsDataLoader()
        print(f"‚úÖ SanctionsDataLoader —Å–æ–∑–¥–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å
        print(f"üìÇ Data directory: {loader.data_dir}")
        print(f"üìÇ Directory exists: {loader.data_dir.exists()}")

        if loader.data_dir.exists():
            files = list(loader.data_dir.glob("*.json"))
            print(f"üìÑ Files found: {len(files)}")
            for f in files:
                size_mb = f.stat().st_size / 1024 / 1024
                print(f"   - {f.name}: {size_mb:.2f}MB")

        # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        print("\nüßπ Clearing cache for fresh test...")
        await loader.clear_cache()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        print("\nüìä Loading dataset...")
        dataset = await loader.load_dataset(force_reload=True)

        print(f"‚úÖ Dataset loaded successfully!")
        print(f"   Total entries: {dataset.total_entries}")
        print(f"   Persons: {len(dataset.persons)}")
        print(f"   Organizations: {len(dataset.organizations)}")
        print(f"   Unique names: {len(dataset.all_names)}")
        print(f"   Sources: {dataset.sources}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fuzzy candidates
        fuzzy_candidates = await loader.get_fuzzy_candidates()
        print(f"   Fuzzy candidates: {len(fuzzy_candidates)}")

        # –ü–æ–∏—Å–∫ –ö–æ–≤—Ä–∏–∫–æ–≤ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö
        kovrykov_candidates = [c for c in fuzzy_candidates if "–∫–æ–≤—Ä–∏–∫–æ–≤" in c.lower()]
        print(f"   '–ö–æ–≤—Ä–∏–∫–æ–≤' entries: {len(kovrykov_candidates)}")
        for candidate in kovrykov_candidates:
            print(f"     - {candidate}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º sample –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö entries
        print(f"\nüìã Sample entries:")
        for entry in dataset.persons[:5]:
            print(f"   - {entry.name} ({entry.source})")

        return len(fuzzy_candidates) >= 100  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SANCTIONS DATA LOADING")
    print("=" * 50)

    success = await test_sanctions_data_loading()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: Sanctions data loading —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå FAILURE: –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π sanctions data")
        print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print("   1. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã sanctions –≤ /data/sanctions")
        print("   2. –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫–µ—à")
        print("   3. –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON —Ñ–∞–π–ª–æ–≤")
        print("   4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)