#!/usr/bin/env python3

"""
–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö Elasticsearch hosts –¥–ª—è —Ä–∞–∑–Ω—ã—Ö environment'–æ–≤.
"""

import sys
import os
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_hosts_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Elasticsearch hosts."""
    print("üîç –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ELASTICSEARCH HOSTS")
    print("=" * 60)

    # –¢–µ–∫—É—â–∞—è —Å—Ä–µ–¥–∞
    print("1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥—ã:")
    print(f"   APP_ENV: {os.environ.get('APP_ENV', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    print(f"   ELASTICSEARCH_HOSTS: {os.environ.get('ELASTICSEARCH_HOSTS', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    print(f"   ES_HOSTS: {os.environ.get('ES_HOSTS', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    print(f"   Docker environment: {os.path.exists('/.dockerenv')}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    try:
        from ai_service.layers.search.config import ElasticsearchConfig

        config = ElasticsearchConfig.from_sources()
        print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ hosts: {config.hosts}")

        if config.hosts == ["http://elasticsearch:9200"]:
            print("   üê≥ Docker production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        elif "95.217.84.234" in str(config.hosts):
            print("   üñ•Ô∏è Production server –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        elif "localhost" in str(config.hosts):
            print("   üíª Local development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        else:
            print("   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    print("\n3. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö environment'–æ–≤:")

    test_cases = [
        {"name": "Docker Production", "env": {"APP_ENV": "production"}, "expected": "elasticsearch:9200"},
        {"name": "Environment Variable", "env": {"ELASTICSEARCH_HOSTS": "http://custom-es:9200"}, "expected": "custom-es:9200"},
        {"name": "Fallback Localhost", "env": {}, "expected": "localhost:9200"},
    ]

    for test_case in test_cases:
        print(f"\n   –¢–µ—Å—Ç: {test_case['name']}")

        # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        original_env = {}
        for key, value in test_case["env"].items():
            original_env[key] = os.environ.get(key)
            os.environ[key] = value

        # –û—á–∏—Å—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if "ELASTICSEARCH_HOSTS" not in test_case["env"]:
            original_es = os.environ.get("ELASTICSEARCH_HOSTS")
            if "ELASTICSEARCH_HOSTS" in os.environ:
                del os.environ["ELASTICSEARCH_HOSTS"]

        try:
            from ai_service.layers.search.config import ElasticsearchConfig
            # Force reload module to pick up new env vars
            import importlib
            import ai_service.layers.search.config
            importlib.reload(ai_service.layers.search.config)
            from ai_service.layers.search.config import ElasticsearchConfig

            config = ElasticsearchConfig.from_sources()
            hosts_str = str(config.hosts)

            if test_case["expected"] in hosts_str:
                print(f"     ‚úÖ Correct: {config.hosts}")
            else:
                print(f"     ‚ùå Expected '{test_case['expected']}' in {config.hosts}")

        except Exception as e:
            print(f"     ‚ùå Error: {e}")
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            for key, original_value in original_env.items():
                if original_value is not None:
                    os.environ[key] = original_value
                elif key in os.environ:
                    del os.environ[key]

            if "ELASTICSEARCH_HOSTS" not in test_case["env"] and "original_es" in locals():
                if original_es is not None:
                    os.environ["ELASTICSEARCH_HOSTS"] = original_es

    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ELASTICSEARCH HOSTS")
    print("=" * 50)

    success = test_hosts_detection()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: Hosts detection —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("\nüìã –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è fallback –Ω–∞ MockSearchService:")
        print("   1. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏—è Docker environment")
        print("   2. ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ELASTICSEARCH_HOSTS –∏–∑ docker-compose")
        print("   3. ‚û°Ô∏è –ù—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã")
    else:
        print("‚ùå FAILURE: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π hosts")

    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)