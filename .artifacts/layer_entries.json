{
  "Variants": [
    {
      "test": "tests/e2e/test_nightmare_scenario.py::TestNightmareScenario::test_performance_nightmare",
      "message": "AssertionError: Should generate many variants for complex text, got 12"
    }
  ],
  "Other": [
    {
      "test": "tests/e2e/test_nightmare_scenario.py::TestNightmareScenario::test_edge_cases_nightmare",
      "message": "AssertionError: assert ('   \\t\\n\\r   ' == ''"
    },
    {
      "test": "tests/e2e/test_nightmare_scenario.py::TestNightmareScenario::test_cache_effectiveness_nightmare",
      "message": "AssertionError: Should have cache hits"
    },
    {
      "test": "tests/integration/test_mixed_script_names.py::TestMixedScriptNames::test_ascii_names_no_morphology",
      "message": "AssertionError: assert 'morph' not in 'morph'"
    },
    {
      "test": "tests/integration/test_ru_uk_sentences.py::TestRussianUkrainianSentences::test_multiple_persons_same_surname",
      "message": "AssertionError: assert 'Владимир Петров' in 'Владимир Анна Петрова'"
    },
    {
      "test": "tests/unit/test_search_contracts.py::TestExtractSearchCandidates::test_extract_from_persons",
      "message": "AssertionError: assert set() == {'ivan petrov...рия сидорова'}"
    },
    {
      "test": "tests/unit/test_search_contracts.py::TestExtractSearchCandidates::test_extract_from_organizations",
      "message": "AssertionError: assert set() == {'apple', 'ap... 'приватбанк'}"
    },
    {
      "test": "tests/unit/test_search_contracts.py::TestExtractSearchCandidates::test_extract_mixed_entities",
      "message": "AssertionError: assert set() == {'и. петров',... 'приватбанк'}"
    },
    {
      "test": "tests/unit/test_search_contracts.py::TestExtractSearchCandidates::test_extract_filters_empty_strings",
      "message": "AssertionError: assert set() == {'и. петров', 'иван петров'}"
    }
  ],
  "Normalization": [
    {
      "test": "tests/integration/test_full_normalization_suite.py::test_ukrainian_full_normalization[\\u041f\\u0435\\u0440\\u0435\\u043a\\u0430\\u0437",
      "message": "AssertionError: Ожидалось: {'володимир', 'зеленського'}, получено: {'володи..."
    },
    {
      "test": "tests/integration/test_full_normalization_suite.py::test_ukrainian_full_normalization[\\u041f\\u0435\\u0440\\u0435\\u043a\\u0430\\u0437",
      "message": "AssertionError: Ожидалось: {'скрипка', 'олег'}, получено: {'олегу', 'скрипці'}"
    },
    {
      "test": "tests/integration/test_full_normalization_suite.py::test_russian_full_normalization[\\u0414\\u043b\\u044f",
      "message": "AssertionError: Ожидалось: {'пугачева', 'алла', 'борисовн'}, получено: {'пу..."
    },
    {
      "test": "tests/integration/test_normalization_pipeline.py::TestNormalizationPipeline::test_compound_name_pipeline",
      "message": "assert 0 > 0"
    },
    {
      "test": "tests/integration/test_normalization_pipeline.py::TestNormalizationPipeline::test_morphology_integration",
      "message": "AssertionError: Should generate multiple variants with morphology enabled"
    },
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_normalization_flags_behavior",
      "message": "AssertionError: Flags should produce different results but all were identic..."
    },
    {
      "test": "tests/integration/test_role_based_normalization.py::test_role_based_slavic_normalization[\\u041f\\u0435\\u0442\\u0440\\u0443",
      "message": "AssertionError: Ожидалось: {'чайковский', 'петр'}, получено: {'петр', 'чайк..."
    },
    {
      "test": "tests/integration/test_role_based_normalization.py::test_role_based_slavic_normalization[\\u043e\\u0442",
      "message": "AssertionError: Ожидалось: {'александрович', 'александр'}, получено: {'алек..."
    },
    {
      "test": "tests/integration/test_role_based_normalization.py::test_role_based_slavic_normalization[\\u0414\\u043b\\u044f",
      "message": "AssertionError: Ожидалось: {'с.', 'іванов-петренко', 'в.'}, получено: {'с.'..."
    },
    {
      "test": "tests/integration/test_role_based_normalization.py::test_role_based_slavic_normalization[\\u043f\\u0443\\u0448\\u043a\\u0438\\u043d",
      "message": "AssertionError: Ожидалось: {'с.', 'а.', 'пушкин'}, получено: {'а.', 'пушкин'}"
    },
    {
      "test": "tests/unit/test_normalization_property_based.py::TestNormalizationServiceProperties::test_russian_feminine_surname_preservation",
      "message": "hypothesis.errors.FailedHealthCheck: 'tests/unit/test_normalization_propert..."
    },
    {
      "test": "tests/unit/test_normalization_property_based.py::TestNormalizationServiceProperties::test_ukrainian_case_preservation",
      "message": "hypothesis.errors.FailedHealthCheck: 'tests/unit/test_normalization_propert..."
    },
    {
      "test": "tests/unit/test_normalization_property_based.py::TestNormalizationServiceProperties::test_token_trace_completeness",
      "message": "hypothesis.errors.FailedHealthCheck: 'tests/unit/test_normalization_propert..."
    },
    {
      "test": "tests/unit/test_normalization_property_based.py::TestNormalizationServiceProperties::test_org_acronym_filtering",
      "message": "hypothesis.errors.FailedHealthCheck: 'tests/unit/test_normalization_propert..."
    },
    {
      "test": "tests/unit/test_normalization_property_based.py::TestNormalizationServiceProperties::test_case_normalization_consistency",
      "message": "hypothesis.errors.FailedHealthCheck: 'tests/unit/test_normalization_propert..."
    },
    {
      "test": "tests/unit/test_normalization_property_based.py::TestNormalizationServiceProperties::test_yo_normalization_consistency",
      "message": "hypothesis.errors.FailedHealthCheck: 'tests/unit/test_normalization_propert..."
    },
    {
      "test": "tests/unit/test_normalization_property_based.py::TestNormalizationServiceProperties::test_deterministic_behavior",
      "message": "hypothesis.errors.FailedHealthCheck: 'tests/unit/test_normalization_propert..."
    },
    {
      "test": "tests/unit/test_normalization_property_based.py::TestNormalizationServiceProperties::test_language_specific_processing",
      "message": "hypothesis.errors.FailedHealthCheck: 'tests/unit/test_normalization_propert..."
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_process_normalization_service_exception",
      "message": "AssertionError: assert True is False"
    },
    {
      "test": "tests/unit/test_unicode_property_based.py::TestUnicodeServiceProperties::test_normalization_stability",
      "message": "assert \"'€u\" == \"'\\x80u\""
    },
    {
      "test": "tests/unit/text_processing/test_flags_behavior.py::TestFlagsBehavior::test_initial_cleanup_still_works_with_flags",
      "message": "AssertionError: Expected 'П' in tokens: ['Коваленко']"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_ukrainian_full_normalization[\\u0414\\u043b\\u044f",
      "message": "AssertionError: Expected 'Петро Іванов', but got 'Петро Іванова'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_ukrainian_full_normalization[\\u041f\\u0435\\u0440\\u0435\\u043a\\u0430\\u0437",
      "message": "AssertionError: Expected 'Володимир Зеленський В. О.', but got 'Володимир З..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_ukrainian_full_normalization[\\u0412\\u0456\\u0434",
      "message": "AssertionError: Expected 'Олександр Положинський', but got 'Олександр Полож..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_ukrainian_full_normalization[\\u0414\\u043b\\u044f",
      "message": "AssertionError: Expected 'Євген Галич', but got 'Євген Галича'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_ukrainian_full_normalization[\\u0420\\u043e\\u0437\\u043c\\u043e\\u0432\\u043b\\u044f\\u0432",
      "message": "AssertionError: Expected 'Валерій Залужний', but got 'Валерій Залужним'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_ukrainian_full_normalization[\\u041f\\u0435\\u0440\\u0435\\u043a\\u0430\\u0437",
      "message": "AssertionError: Expected 'Олег Скрипка', but got ''"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_ukrainian_full_normalization[\\u0414\\u043b\\u044f",
      "message": "AssertionError: Expected 'Іванов-Петренко С.В.', but got 'Іванова-Петренко ..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_russian_full_normalization[\\u041f\\u0435\\u0440\\u0435\\u0432\\u043e\\u0434",
      "message": "AssertionError: Expected 'Александр Пушкин Александрович', but got 'Алексан..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_russian_full_normalization[\\u041e\\u043f\\u043b\\u0430\\u0442\\u0430",
      "message": "AssertionError: Expected 'Владимир Высоцкий', but got 'Владимир Высоцкого'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_russian_full_normalization[\\u0411\\u043b\\u0430\\u0433\\u043e\\u0434\\u0430\\u0440\\u043d\\u043e\\u0441\\u0442\\u044c",
      "message": "AssertionError: Expected 'Петр Чайковский', but got 'Петр Чайковском'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_russian_full_normalization[\\u041e\\u0442\\u043f\\u0440\\u0430\\u0432\\u043b\\u0435\\u043d\\u043e",
      "message": "AssertionError: Expected 'Есенин С. А.', but got 'Есенина С. А.'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_logic.py::test_russian_full_normalization[\\u0417\\u0430\\u0447\\u0438\\u0441\\u043b\\u0435\\u043d\\u0438\\u0435",
      "message": "AssertionError: Expected 'Лермонтов М.Ю.', but got 'Лермонтова М. Ю.'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationService::test_normalize_english_text",
      "message": "AssertionError: assert 'Hello world' in 'Hello World'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationService::test_normalize_russian_text",
      "message": "AssertionError: assert 'Привет' in ''"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationService::test_normalize_with_fallback",
      "message": "AssertionError: assert 'Hello world' in 'Hello World'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationService::test_normalize_with_auto_language_detection",
      "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for Normal..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationService::test_normalize_with_special_characters",
      "message": "assert \"O'Connor\" in \"O'connor\""
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationService::test_normalize_sync_method",
      "message": "AssertionError: assert 'Hello world' in 'Hello World'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationService::test_normalize_async_method",
      "message": "AssertionError: assert 'Hello world' in 'Hello World'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationService::test_normalize_with_flags",
      "message": "AssertionError: assert 'Hello world' in 'Hello World'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationServiceConfiguration::test_diminutive_maps_initialization",
      "message": "AssertionError: assert 'en' in {'ru': {'алекс': 'Александр', 'алекса': 'Але..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationResult::test_normalization_result_creation",
      "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for Normal..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_fixed.py::TestNormalizationResult::test_normalization_result_error_case",
      "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for Normal..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_normalize_english_text",
      "message": "AssertionError: assert 'Hello world' in 'Hello World'"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_normalize_russian_text",
      "message": "AssertionError: assert 'Привет' in ''"
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_tokenize_text_fallback_to_nltk",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_tokenize_text_basic_fallback",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_remove_stop_words_english",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_remove_stop_words_russian",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_remove_stop_words_fallback",
      "message": "AttributeError: <module 'src.ai_service.layers.normalization.normalization_..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_apply_stemming_english",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_apply_stemming_russian",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_apply_stemming_ukrainian",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_apply_stemming_fallback",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_apply_lemmatization_english",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_apply_lemmatization_russian",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationService::test_apply_lemmatization_fallback",
      "message": "AttributeError: 'NormalizationService' object has no attribute 'language_co..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationServiceConfiguration::test_initialization_without_spacy",
      "message": "AttributeError: <module 'src.ai_service.layers.normalization.normalization_..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationServiceConfiguration::test_initialization_without_nltk",
      "message": "AttributeError: <module 'src.ai_service.layers.normalization.normalization_..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationServiceConfiguration::test_initialization_minimal_dependencies",
      "message": "AttributeError: <module 'src.ai_service.layers.normalization.normalization_..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationServiceConfiguration::test_cache_functionality",
      "message": "AttributeError: <module 'src.ai_service.layers.normalization.normalization_..."
    },
    {
      "test": "tests/unit/text_processing/test_normalization_service_old.py::TestNormalizationResult::test_normalization_result_error_case",
      "message": "AttributeError: 'NormalizationResult' object has no attribute 'error'. Did ..."
    },
    {
      "test": "tests/unit/utilities/test_canary_overfit.py::TestCanaryOverfit::test_context_words_never_become_names",
      "message": "AssertionError: Expected name 'п.і.' not found in normalized output: П. І. ..."
    },
    {
      "test": "tests/unit/utilities/test_canary_overfit.py::TestCanaryOverfit::test_ukrainian_context_words",
      "message": "AssertionError: Context word 'і' should not appear in normalized output: Ів..."
    },
    {
      "test": "tests/unit/utilities/test_canary_overfit.py::TestCanaryOverfit::test_russian_context_words",
      "message": "AssertionError: Context word 'и' should not appear in normalized output: Ив..."
    }
  ],
  "Language": [
    {
      "test": "tests/integration/test_lang_order_unicode_first.py::TestUnicodeFirstLanguageDetectionOrder::test_orchestrator_call_order_verification",
      "message": "AssertionError: assert 1 < 0"
    },
    {
      "test": "tests/unit/utilities/test_canary_overfit.py::TestCanaryOverfit::test_mixed_language_context_words",
      "message": "AssertionError: Context word 'and' should not appear in normalized output: ..."
    }
  ],
  "Decision": [
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_pipeline_integration[ukrainian_company_with_legal_form]",
      "message": "AssertionError: Org 0 core mismatch: expected ПриватБанк, got 'ПРИВАТБАНК'"
    },
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_pipeline_integration[mixed_person_and_company]",
      "message": "AssertionError: Expected normalized 'П. І. Коваленко', got 'П. І. Коваленко..."
    },
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_pipeline_integration[person_with_inn]",
      "message": "AssertionError: Expected normalized 'П. С. Іванов', got 'Иванов П. С.'"
    },
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_pipeline_integration[mixed_script_names]",
      "message": "AssertionError: Expected normalized 'John Smith Олена Петренко', got 'John ..."
    },
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_pipeline_integration[quoted_company_with_person]",
      "message": "AssertionError: Language confidence 0.75 below minimum 0.8"
    },
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_pipeline_integration[overfit_canary]",
      "message": "AssertionError: Expected language uk, got ru"
    },
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_pipeline_integration[full_pipeline_stress_test]",
      "message": "AssertionError: Expected normalized 'Іваненко Іван Іванович', got 'Агросвіт..."
    },
    {
      "test": "tests/integration/test_pipeline_end2end.py::TestPipelineEnd2End::test_performance_requirements",
      "message": "AssertionError: Short text 'Іван Петров' processing too slow: 0.017s (shoul..."
    },
    {
      "test": "tests/unit/test_decision_engine_with_search.py::TestDecisionEngineWithSearch::test_calculate_weighted_score_with_multiple_matches",
      "message": "assert 1.0 == 1.495"
    },
    {
      "test": "tests/unit/test_decision_engine_with_search.py::TestDecisionEngineWithSearch::test_calculate_weighted_score_threshold_filtering",
      "message": "assert 0.745 == 0.645"
    },
    {
      "test": "tests/unit/test_decision_engine_with_search.py::TestDecisionEngineWithSearch::test_search_bonuses_and_penalties",
      "message": "assert 1.0 == 1.065"
    },
    {
      "test": "tests/unit/test_orchestrator_service.py::TestUnifiedOrchestrator::test_process_basic_functionality",
      "message": "assert False is True"
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_process_basic_functionality",
      "message": "AssertionError: assert 'Test text' == 'test text'"
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_process_with_cache_hit",
      "message": "AssertionError: assert UnifiedProces...ue, errors=[]) == UnifiedProces...ue..."
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_process_with_cache_miss",
      "message": "AssertionError: Expected 'set' to have been called once. Called 0 times."
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_process_error_handling",
      "message": "AssertionError: assert True is False"
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_get_processing_stats",
      "message": "AssertionError: assert 'services' in {'cache': 0, 'cache_hits': 0, 'cache_m..."
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_update_stats",
      "message": "assert 0 >= 1"
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_force_reprocess_ignores_cache",
      "message": "AssertionError: assert 'Force reprocess test' == 'new result'"
    }
  ],
  "Signals": [
    {
      "test": "tests/unit/signals/test_signals_service_comprehensive.py::TestSignalsServiceIntegration::test_complex_payment_scenario",
      "message": "assert 2 == 1"
    }
  ],
  "Index/Elastic": [
    {
      "test": "tests/unit/test_elasticsearch_watchlist_adapter.py::TestElasticsearchWatchlistAdapter::test_search_ac_success",
      "message": "AssertionError: assert [('person_001...on_001', 0.8)] == [('person_001', 0.8)]"
    },
    {
      "test": "tests/unit/test_elasticsearch_watchlist_adapter.py::TestElasticsearchWatchlistAdapter::test_reload_snapshot_success",
      "message": "KeyError: 'snapshot_restored'"
    },
    {
      "test": "tests/unit/test_elasticsearch_watchlist_adapter.py::TestElasticsearchWatchlistAdapter::test_close",
      "message": "AssertionError: Expected 'aclose' to have been called once. Called 0 times."
    },
    {
      "test": "tests/unit/test_elasticsearch_watchlist_adapter.py::TestFactoryFunctions::test_create_elasticsearch_enhanced_adapter",
      "message": "AttributeError: 'VectorIndexConfig' object has no attribute 'use_semantic_e..."
    },
    {
      "test": "tests/unit/test_elasticsearch_watchlist_adapter.py::TestElasticsearchWatchlistAdapterIntegration::test_full_workflow",
      "message": "assert False is True"
    },
    {
      "test": "tests/unit/test_search_integration.py::TestSearchIntegration::test_extract_and_search_with_service",
      "message": "assert None is not None"
    },
    {
      "test": "tests/unit/test_search_integration.py::TestSearchIntegration::test_should_enable_search_with_persons",
      "message": "assert False is True"
    },
    {
      "test": "tests/unit/test_search_integration.py::TestSearchIntegration::test_should_enable_search_with_organizations",
      "message": "assert False is True"
    },
    {
      "test": "tests/unit/test_search_integration.py::TestSearchIntegrationThresholds::test_threshold_normalization",
      "message": "assert None is not None"
    },
    {
      "test": "tests/unit/test_search_integration.py::TestSearchIntegrationThresholds::test_search_mode_handling",
      "message": "assert None is not None"
    }
  ],
  "Embeddings": [
    {
      "test": "tests/unit/test_embedding_contract.py::TestEmbeddingContract::test_pure_vector_generation_contract",
      "message": "AssertionError: Unexpected methods found: {'log_performance', 'health_check..."
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_process_with_embeddings",
      "message": "AssertionError: Expected 'get_embeddings' to have been called once. Called ..."
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_search_similar_names_with_embeddings",
      "message": "assert 0 == 2"
    },
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_search_similar_names_fallback",
      "message": "AssertionError: assert 'embeddings' == 'variants'"
    }
  ],
  "Unicode": [
    {
      "test": "tests/unit/test_orchestrator_service_old.py::TestOrchestratorService::test_analyze_text_complexity",
      "message": "AssertionError: assert 'unicode' in {'character_count': 25, 'complexity_sco..."
    },
    {
      "test": "tests/unit/utilities/test_input_validation.py::TestInputValidator::test_homoglyph_replacement",
      "message": "AssertionError: assert 'Pаvlоv' == 'Pavlov'"
    },
    {
      "test": "tests/unit/utilities/test_input_validation.py::TestInputValidator::test_suspicion_analysis_high_homoglyph_ratio",
      "message": "assert False is True"
    }
  ],
  "AC": [
    {
      "test": "tests/unit/test_pattern_service.py::TestPatternService::test_case_sensitivity_handling",
      "message": "assert 0 > 0"
    }
  ],
  "SmartFilter": [
    {
      "test": "tests/unit/test_smart_filter_service.py::TestSmartFilterService::test_service_words_cleaning",
      "message": "AssertionError: 'оплата за консультацію Петров Іван' == 'оплата за консульт..."
    },
    {
      "test": "tests/unit/test_smart_filter_service.py::TestSmartFilterService::test_should_process_text_excluded",
      "message": "AssertionError: 'исключен' not found in 'Text excluded from processing (ser..."
    }
  ]
}