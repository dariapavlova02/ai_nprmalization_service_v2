#!/usr/bin/env python3

"""
–¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FuzzySearchService –≤ HybridSearchService –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è
–ø–æ—á–µ–º—É fuzzy search –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_fuzzy_service_state():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FuzzySearchService."""
    print("üîç –¢–ï–°–¢ –°–û–°–¢–û–Ø–ù–ò–Ø FUZZYSEARCHSERVICE")
    print("=" * 60)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rapidfuzz
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ rapidfuzz...")
        try:
            import rapidfuzz
            from rapidfuzz import fuzz, process
            print("   ‚úÖ rapidfuzz –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –í–µ—Ä—Å–∏—è: {rapidfuzz.__version__ if hasattr(rapidfuzz, '__version__') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        except ImportError as e:
            print(f"   ‚ùå rapidfuzz –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False

        # –°–æ–∑–¥–∞–µ–º HybridSearchService
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ HybridSearchService...")
        from ai_service.layers.search.config import HybridSearchConfig
        from ai_service.layers.search.hybrid_search_service import HybridSearchService

        search_config = HybridSearchConfig.from_env()
        search_service = HybridSearchService(search_config)
        search_service.initialize()

        print("   ‚úÖ HybridSearchService —Å–æ–∑–¥–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FuzzySearchService
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ FuzzySearchService...")
        fuzzy_service = search_service._fuzzy_service
        print(f"   fuzzy_service type: {type(fuzzy_service).__name__}")
        print(f"   fuzzy_service.enabled: {fuzzy_service.enabled}")

        if not fuzzy_service.enabled:
            print("   ‚ùå FuzzySearchService –æ—Ç–∫–ª—é—á–µ–Ω!")
            return False

        print("   ‚úÖ FuzzySearchService –≤–∫–ª—é—á–µ–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º direct fuzzy search
        print("\n4. –¢–µ—Å—Ç direct fuzzy search...")
        candidates = ["–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á", "–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω", "–°–∏–¥–æ—Ä–æ–≤ –í–∞—Å–∏–ª–∏–π"]
        query = "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"

        fuzzy_results = await fuzzy_service.search_async(
            query=query,
            candidates=candidates
        )

        print(f"   Query: '{query}'")
        print(f"   Candidates: {len(candidates)}")
        print(f"   Results: {len(fuzzy_results)}")

        for result in fuzzy_results:
            print(f"     - {result.matched_text} (score: {result.score:.3f}, algo: {result.algorithm})")

        return len(fuzzy_results) > 0

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FUZZYSEARCHSERVICE")
    print("=" * 50)

    success = await test_fuzzy_service_state()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: FuzzySearchService —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå FAILURE: –ü—Ä–æ–±–ª–µ–º—ã —Å FuzzySearchService")
        print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print("   1. rapidfuzz –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   2. FuzzySearchService.enabled = False")
        print("   3. –ü—Ä–æ–±–ª–µ–º—ã –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –ø–æ–∏—Å–∫–∞")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)