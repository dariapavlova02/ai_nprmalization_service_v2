#!/usr/bin/env python3

"""
–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ orchestrator_factory –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ fallback.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_factory_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è search service –∏–∑ orchestrator_factory."""
    print("üîç –¢–ï–°–¢ –õ–û–ì–ò–ö–ò ORCHESTRATOR FACTORY")
    print("=" * 60)

    # –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∫–æ–¥–∞ –∏–∑ orchestrator_factory
    enable_search = True
    search_service = None

    if enable_search and search_service is None:
        try:
            print("1. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HybridSearchService...")
            from ai_service.layers.search.config import HybridSearchConfig
            from ai_service.layers.search.hybrid_search_service import HybridSearchService

            search_config = HybridSearchConfig.from_env()
            search_service = HybridSearchService(search_config)
            search_service.initialize()  # Not async
            print("‚úÖ Search service initialized")

            print(f"   Search service type: {type(search_service).__name__}")

        except Exception as e:
            print(f"‚ùå Failed to initialize HybridSearchService: {e}")
            print(f"   Error type: {type(e).__name__}")
            print("‚ÑπÔ∏è Falling back to MockSearchService for development/testing")

            # Force use MockSearchService when Elasticsearch is not available
            try:
                from ai_service.layers.search.mock_search_service import MockSearchService
                search_service = MockSearchService()
                search_service.initialize()
                print("‚úÖ MockSearchService initialized successfully - search escalation available")

                print(f"   Search service type: {type(search_service).__name__}")

            except Exception as mock_e:
                print(f"‚ùå Critical: Failed to initialize MockSearchService: {mock_e}")
                search_service = None
                enable_search = False

    print(f"\nüìä FINAL RESULT:")
    print(f"   enable_search: {enable_search}")
    print(f"   search_service: {type(search_service).__name__ if search_service else None}")

    return search_service

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FACTORY LOGIC")
    print("=" * 50)

    search_service = test_factory_logic()

    print("\n" + "=" * 50)
    if search_service and type(search_service).__name__ == "HybridSearchService":
        print("üéâ SUCCESS: Factory –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HybridSearchService!")
    elif search_service and type(search_service).__name__ == "MockSearchService":
        print("‚ö†Ô∏è FALLBACK: Factory –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MockSearchService")
        print("   –ü—Ä–∏—á–∏–Ω–∞: HybridSearchService.initialize() failed")
    else:
        print("‚ùå FAILURE: –ù–∏–∫–∞–∫–æ–π search service –Ω–µ —Å–æ–∑–¥–∞–Ω")

    return search_service is not None

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)