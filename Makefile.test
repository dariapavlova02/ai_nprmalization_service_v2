# Test Makefile for search integration tests

.PHONY: help test-unit test-integration test-performance test-all setup-test-env clean-test-env

help:
	@echo "Available test targets:"
	@echo "  test-unit        - Run unit tests only"
	@echo "  test-integration - Run integration tests (requires Docker)"
	@echo "  test-performance - Run performance tests (requires Docker)"
	@echo "  test-all         - Run all tests"
	@echo "  setup-test-env   - Setup test environment with Docker Compose"
	@echo "  clean-test-env   - Clean up test environment"

# Unit tests (no external dependencies)
test-unit:
	pytest tests/unit/ -m "unit" -v --tb=short

# Integration tests (requires Elasticsearch)
test-integration:
	pytest tests/integration/ -m "integration" -v --tb=short

# Performance tests (requires Elasticsearch)
test-performance:
	pytest tests/performance/ -m "performance" -v --tb=short

# All tests
test-all:
	pytest tests/ -v --tb=short

# Setup test environment
setup-test-env:
	docker-compose -f docker-compose.test.yml up -d
	@echo "Waiting for Elasticsearch to be ready..."
	@timeout 60 bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'
	@echo "Test environment is ready!"

# Clean up test environment
clean-test-env:
	docker-compose -f docker-compose.test.yml down -v
	docker system prune -f

# Run tests with setup and cleanup
test-with-docker: setup-test-env test-integration test-performance clean-test-env

# Install test dependencies
install-test-deps:
	pip install -r tests/requirements_test.txt

# Run specific test file
test-file:
	@if [ -z "$(FILE)" ]; then echo "Usage: make test-file FILE=tests/unit/test_search_contracts.py"; exit 1; fi
	pytest $(FILE) -v --tb=short

# Run tests with coverage
test-coverage:
	pytest tests/ --cov=src/ai_service --cov-report=html --cov-report=term-missing

# Run tests in parallel
test-parallel:
	pytest tests/ -n auto -v --tb=short
