#!/usr/bin/env python3

"""
–¢–µ—Å—Ç fuzzy –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—á–µ–º—É "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"
–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á".
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_fuzzy_algorithm():
    """–¢–µ—Å—Ç fuzzy –∞–ª–≥–æ—Ä–∏—Ç–º–∞."""
    print("üîç –¢–ï–°–¢ FUZZY –ê–õ–ì–û–†–ò–¢–ú–ê")
    print("=" * 60)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rapidfuzz –Ω–∞–ø—Ä—è–º—É—é
        import rapidfuzz
        from rapidfuzz import fuzz

        query = "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"
        candidates = [
            "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á",
            "–ú–æ—Ä–æ–∑–∫–æ –û–ª—å–≥–∞ –†–æ–º–∞–Ω—ñ–≤–Ω–∞",
            "–†–æ–º–∞–Ω –ö–æ–≤—Ä–∏–∫–æ–≤",
            "–ö–æ–≤—Ä–∏–∫ –†–æ–º–∞–Ω",
            "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω"
        ]

        print(f"Query: '{query}'\n")

        algorithms = [
            ("ratio", fuzz.ratio),
            ("partial_ratio", fuzz.partial_ratio),
            ("token_sort_ratio", fuzz.token_sort_ratio),
            ("token_set_ratio", fuzz.token_set_ratio)
        ]

        for candidate in candidates:
            print(f"Candidate: '{candidate}'")
            for algo_name, algo_func in algorithms:
                score = algo_func(query, candidate) / 100.0  # Convert to 0-1
                print(f"  {algo_name:15}: {score:.3f}")
            print()

        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º FuzzySearchService
        print("=" * 40)
        print("–¢–ï–°–¢ FUZZYSEARCHSERVICE")

        from ai_service.layers.search.fuzzy_search_service import FuzzySearchService, FuzzyConfig

        fuzzy_config = FuzzyConfig(
            min_score_threshold=0.4,   # –ï—â–µ –Ω–∏–∂–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            high_confidence_threshold=0.80,
            partial_match_threshold=0.70,
            enable_name_fuzzy=True,
            name_boost_factor=1.2
        )

        fuzzy_service = FuzzySearchService(fuzzy_config)
        print(f"FuzzySearchService enabled: {fuzzy_service.enabled}")
        print(f"Min threshold: {fuzzy_service.config.min_score_threshold}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_fuzzy_service_direct():
    """–¢–µ—Å—Ç FuzzySearchService –Ω–∞–ø—Ä—è–º—É—é."""
    print("\n" + "=" * 40)
    print("–¢–ï–°–¢ FUZZYSEARCHSERVICE ASYNC")

    try:
        from ai_service.layers.search.fuzzy_search_service import FuzzySearchService, FuzzyConfig

        fuzzy_config = FuzzyConfig(
            min_score_threshold=0.4,
            high_confidence_threshold=0.80,
            partial_match_threshold=0.70,
            enable_name_fuzzy=True,
            name_boost_factor=1.2
        )

        fuzzy_service = FuzzySearchService(fuzzy_config)

        query = "–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω"
        candidates = [
            "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—ñ–π–æ–≤–∏—á",
            "–ú–æ—Ä–æ–∑–∫–æ –û–ª—å–≥–∞ –†–æ–º–∞–Ω—ñ–≤–Ω–∞",
            "–†–æ–º–∞–Ω –ö–æ–≤—Ä–∏–∫–æ–≤",
            "–ö–æ–≤—Ä–∏–∫ –†–æ–º–∞–Ω",
            "–ö–æ–≤—Ä–∏–∫–æ–≤ –†–æ–º–∞–Ω"
        ]

        print(f"\nQuery: '{query}'")
        print(f"Candidates: {len(candidates)}")

        results = await fuzzy_service.search_async(
            query=query,
            candidates=candidates
        )

        print(f"Results: {len(results)}")
        for result in results:
            print(f"  - {result.matched_text} (score: {result.score:.3f}, algo: {result.algorithm})")

        return len(results) > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ async: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –ê–ù–ê–õ–ò–ó FUZZY –ê–õ–ì–û–†–ò–¢–ú–ê")
    print("=" * 50)

    sync_success = test_fuzzy_algorithm()
    async_success = await test_fuzzy_service_direct()

    print("\n" + "=" * 50)
    if sync_success and async_success:
        print("üéâ SUCCESS: Fuzzy –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå FAILURE: –ü—Ä–æ–±–ª–µ–º—ã —Å fuzzy –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º")

    return sync_success and async_success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)