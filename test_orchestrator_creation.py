#!/usr/bin/env python3

"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è orchestrator'–∞ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç fallback –Ω–∞ MockSearchService.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_orchestrator_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è production orchestrator."""
    print("üîç –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø PRODUCTION ORCHESTRATOR")
    print("=" * 60)

    try:
        from ai_service.core.orchestrator_factory import OrchestratorFactory

        print("1. –°–æ–∑–¥–∞–Ω–∏–µ production orchestrator...")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ production orchestrator
        orchestrator = await OrchestratorFactory.create_production_orchestrator()

        print("‚úÖ Production orchestrator —Å–æ–∑–¥–∞–Ω!")

        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–æ–π search service –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        search_service = orchestrator.search_service
        print(f"   Search service type: {type(search_service)}")
        print(f"   Search service class: {search_service.__class__.__name__}")

        if hasattr(search_service, 'config'):
            config = search_service.config
            print(f"   Config type: {type(config)}")
            if hasattr(config, 'elasticsearch'):
                print(f"   ES hosts: {config.elasticsearch.hosts}")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥–¥–µ –ª–æ–º–∞–µ—Ç—Å—è
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π NormalizationResult
        class MockNormResult:
            def __init__(self, normalized, tokens):
                self.normalized = normalized
                self.normalized_text = normalized  # HybridSearchService –æ–∂–∏–¥–∞–µ—Ç —ç—Ç–æ –ø–æ–ª–µ
                self.tokens = tokens
                self.trace = []
                self.language = "uk"
                self.confidence = 0.8
                self.success = True

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SearchOpts
            from ai_service.layers.search.contracts import SearchOpts

            norm_result = MockNormResult("–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω", ["–ö–æ–≤—Ä–∏–∫–æ", "–†–æ–º–∞–Ω"])
            search_opts = SearchOpts(top_k=5, threshold=0.7)

            print("   –í—ã–ø–æ–ª–Ω—è–µ–º find_candidates...")
            candidates = await search_service.find_candidates(
                normalized=norm_result,
                text="–ö–æ–≤—Ä–∏–∫–æ –†–æ–º–∞–Ω",
                opts=search_opts
            )

            print(f"   ‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
            for candidate in candidates[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 3
                print(f"     - {candidate.text} (score: {candidate.score:.3f})")

        except Exception as search_error:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_error}")
            print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(search_error)}")
            import traceback
            traceback.print_exc()

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è orchestrator: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø ORCHESTRATOR")
    print("=" * 50)

    success = await test_orchestrator_creation()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: Orchestrator —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å HybridSearchService!")
    else:
        print("‚ùå FAILURE: Orchestrator fallback –Ω–∞ MockSearchService.")

    return success

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)