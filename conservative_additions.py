#!/usr/bin/env python3
"""
–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–ß–ï–í–ò–î–ù–û –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
"""

import sys
sys.path.append('/Users/dariapavlova/Desktop/ai-service/src')

from ai_service.data.dicts.stopwords import STOP_ALL

def conservative_safe_additions():
    """–¢–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""

    print("üõ°Ô∏è  –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –ë–ï–ó–û–ü–ê–°–ù–´–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 70)
    print("üéØ –ü—Ä–∏–Ω—Ü–∏–ø: –¥–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –æ—á–µ–≤–∏–¥–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º—É—Å–æ—Ä")
    print("‚ùå –ò—Å–∫–ª—é—á–∞–µ–º: –≤—Å–µ —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –∏–º–µ–Ω–∏")

    # –û–ß–ï–í–ò–î–ù–û –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    ultra_safe_additions = {

        "–î–í–£–ó–ù–ê–ß–ù–´–ï_–ß–ò–°–õ–ê_–í–´–°–û–ö–û–ß–ê–°–¢–û–¢–ù–´–ï": [
            # –¢–æ–ø –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ - —Ç–æ—á–Ω–æ –Ω–µ –∏–º–µ–Ω–∞
            "62", "60", "80", "92", "56", "52", "64", "68", "76", "72",
            "96", "84", "88", "67", "55", "53", "58", "57", "51", "79",
            "78", "74", "65", "69", "77", "89", "87", "83", "75", "63",
            "59", "54", "73", "85", "91", "95", "93", "82", "86", "66"
        ],

        "–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï_–ö–û–î–´_–û–ß–ï–í–ò–î–ù–´–ï": [
            # –¢–æ–ª—å–∫–æ —è–≤–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            "–∫–ø", "–µ–∫", "—î–ø",  # –û—á–µ–≤–∏–¥–Ω—ã–µ –∫–æ–¥—ã
        ],

        "–§–ò–ù–ê–ù–°–û–í–´–ï_–¢–ï–†–ú–ò–ù–´_–ë–ï–ó–°–ü–û–†–ù–´–ï": [
            "–∫—É—Ä—Å",  # –í–∞–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å - —Ç–æ—á–Ω–æ –Ω–µ –∏–º—è
            "–∫–æ–º–ø–∞–Ω–∏–∏",  # –°–ª–æ–≤–æ "–∫–æ–º–ø–∞–Ω–∏–∏" - —è–≤–Ω–æ –Ω–µ –∏–º—è
        ],

        "–û–ü–ò–°–ê–¢–ï–õ–¨–ù–´–ï_–û–ß–ï–í–ò–î–ù–´–ï": [
            # –¢–æ–ª—å–∫–æ —è–≤–Ω–æ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ, –Ω–µ –º–æ–≥—É—â–∏–µ –±—ã—Ç—å –∏–º–µ–Ω–∞–º–∏
            "–º–æ–ª–æ–¥—ñ–∂–Ω–∞", "–º–æ–ª–æ–¥—ñ–∂–Ω–µ",  # –Ø–≤–Ω–æ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
            "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç",  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
            "–ø—Ä–∞–≤–∏–ª–∞", "–ø—Ä–æ—Ü–µ–¥—É—Ä–∏", "–Ω–æ—Ä–º–∏",  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ
            "—Å—É—á–∞—Å–Ω–∏–π", "—Å—É—á–∞—Å–Ω—ñ",  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π
            "—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π",  # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
        ],

        "–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï_–ë–ï–ó–°–ü–û–†–ù–´–ï": [
            "—Å–µ–ª–æ",  # –¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        ],

        "–°–õ–£–ñ–ï–ë–ù–´–ï_–°–õ–û–í–ê_–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï": [
            "–∫–æ–ª–∏", "—è–∫—â–æ",  # –ö–æ–≥–¥–∞, –µ—Å–ª–∏ - —Å–æ—é–∑—ã
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç",  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω
        ]
    }

    print(f"\nüìä –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")

    total_safe = 0
    all_safe_tokens = []

    for category, tokens in ultra_safe_additions.items():
        print(f"\nüìÇ {category.replace('_', ' ')} ({len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤):")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        sample = tokens[:8] if len(tokens) > 8 else tokens
        print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(sample)}")
        if len(tokens) > 8:
            print(f"   ... –∏ –µ—â–µ {len(tokens) - 8}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞—Ö
        new_tokens = [token for token in tokens if token not in STOP_ALL]
        if new_tokens:
            print(f"   ‚úÖ –ù–æ–≤—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(new_tokens)}")
            all_safe_tokens.extend(new_tokens)
        else:
            print(f"   ‚ÑπÔ∏è  –í—Å–µ —É–∂–µ –≤ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞—Ö")

        total_safe += len(new_tokens)

    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–û–î–ë–û–†–ö–ê:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total_safe}")
    print(f"   ‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ–ø-—Å–ª–æ–≤: {len(STOP_ALL)}")
    print(f"   ‚Ä¢ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(STOP_ALL) + total_safe}")

    return all_safe_tokens

def generate_safe_code(safe_tokens):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""

    print(f"\n" + "=" * 70)
    print("üíæ –ö–û–î –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø:")
    print("=" * 70)

    print("\n# –£–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–π –º—É—Å–æ—Ä:")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 8 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    for i in range(0, len(safe_tokens), 8):
        batch = safe_tokens[i:i+8]
        formatted = [f'"{token}"' for token in batch]
        print("    " + ", ".join(formatted) + ",")

def test_safety_check():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print("=" * 70)

    # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –î–û–õ–ñ–ù–´ –ø–æ–ø–∞—Å—Ç—å
    dangerous_patterns = [
        "–µ–π", "–∞–Ω", "—è–Ω–∞", "–≤–æ–ª", "–µ–≤–≥", "–ª—å—è", "—é—Ä—å", "–≥–∞", "–ª–∞–π", "–æ–ª",
        "–≥–æ", "–≥—É", "–∫–æ", "–∞—Ä", "–µ–Ω", "–æ—Ä", "–µ–ª"  # –ú–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç—è–º–∏ –∏–º–µ–Ω
    ]

    safe_tokens = conservative_safe_additions()

    conflicts = [token for token in safe_tokens if token in dangerous_patterns]

    if conflicts:
        print(f"‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –û–ü–ê–°–ù–´–ï: {conflicts}")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç—å!")
    else:
        print("‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã - –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    print(f"\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ (50+ —à—Ç—É–∫)")
    print("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã")
    print("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã")
    print("‚ùå –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (–º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç–∏ –∏–º–µ–Ω)")

    return safe_tokens

if __name__ == "__main__":
    safe_tokens = test_safety_check()
    generate_safe_code(safe_tokens)