#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"
"""
import sys
sys.path.insert(0, 'src')

import requests
from requests.auth import HTTPBasicAuth

def test_poroshenko_ac_patterns():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º AC –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º AC –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ...")

    # ES –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    ES_HOST = "95.217.84.234"
    ES_PORT = 9200
    ES_USER = "elastic"
    ES_PASSWORD = "AiServiceElastic2024!"
    ES_INDEX = "ai_service_ac_patterns"

    url = f"http://{ES_HOST}:{ES_PORT}/{ES_INDEX}/_search"
    auth = HTTPBasicAuth(ES_USER, ES_PASSWORD)

    # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ
    search_query = {
        "query": {
            "wildcard": {
                "pattern": {
                    "value": "*–ø–æ—Ä–æ—à–µ–Ω–∫–æ*",
                    "case_insensitive": True
                }
            }
        },
        "size": 10
    }

    try:
        response = requests.post(url, json=search_query, auth=auth)
        if response.status_code == 200:
            result = response.json()
            total_hits = result["hits"]["total"]["value"]
            print(f"–ù–∞–π–¥–µ–Ω–æ {total_hits} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è '–ø–æ—Ä–æ—à–µ–Ω–∫–æ'")

            if total_hits > 0:
                print("–ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
                for hit in result["hits"]["hits"][:5]:
                    pattern = hit["_source"]
                    print(f"  - '{pattern['pattern']}' (tier {pattern['tier']}, {pattern['type']})")
                return True
            else:
                print("‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ ES: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ES: {e}")
        return False

def test_poroshenko_smartfilter():
    """–¢–µ—Å—Ç SmartFilter –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º SmartFilter –¥–ª—è –ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ...")

    try:
        from ai_service.layers.smart_filter.smart_filter_service import SmartFilterService

        smart_filter = SmartFilterService(
            language_service=None,
            signal_service=None,
            enable_terrorism_detection=True,
            enable_aho_corasick=True
        )

        test_text = "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"
        result = smart_filter.should_process_text(test_text)

        print(f"–¢–µ–∫—Å—Ç: {test_text}")
        print(f"Should process: {result.should_process}")
        print(f"Confidence: {result.confidence}")
        print(f"AC matches: {result.signal_details.get('aho_corasick_matches', {}).get('total_matches', 0)}")

        # –¢–µ—Å—Ç AC –ø–æ–∏—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
        ac_result = smart_filter.search_aho_corasick(test_text)
        print(f"–ü—Ä—è–º–æ–π AC –ø–æ–∏—Å–∫: {ac_result.get('total_matches', 0)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")

        if result.should_process and ac_result.get('total_matches', 0) > 0:
            print("‚úÖ SmartFilter —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ!")
            return True
        else:
            print("‚ùå SmartFilter –±–ª–æ–∫–∏—Ä—É–µ—Ç –ü–æ—Ä–æ—à–µ–Ω–∫–æ")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SmartFilter: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_poroshenko_normalization():
    """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ...")

    try:
        from ai_service.layers.normalization.normalization_service import NormalizationService

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        norm_service = NormalizationService()

        test_text = "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"
        result = norm_service.normalize(
            text=test_text,
            language="uk",
            remove_stop_words=True,
            preserve_names=True,
            enable_advanced_features=True
        )

        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {test_text}")
        print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {result.normalized}")
        print(f"–¢–æ–∫–µ–Ω—ã: {result.tokens}")
        print(f"–£—Å–ø–µ—Ö: {result.success}")

        if result.success and result.normalized:
            print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ!")
            return True
        else:
            print("‚ùå –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_poroshenko_full_process():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ API"""
    print("\nüöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ curl...")

    import subprocess
    import json

    curl_cmd = [
        'curl', '-X', 'POST',
        'http://localhost:8080/process',
        '-H', 'Content-Type: application/json',
        '-d', json.dumps({
            "text": "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ",
            "options": {
                "enable_advanced_features": True,
                "generate_variants": True,
                "generate_embeddings": False,
                "enable_search": True
            }
        }),
        '--connect-timeout', '5',
        '--max-time', '30'
    ]

    try:
        result = subprocess.run(curl_cmd, capture_output=True, text=True, timeout=35)

        if result.returncode == 0:
            try:
                response = json.loads(result.stdout)
                print("‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")

                print(f"Success: {response.get('success', False)}")
                print(f"Original: {response.get('original_text', 'N/A')}")
                print(f"Normalized: {response.get('normalized_text', 'N/A')}")
                print(f"Language: {response.get('language', 'N/A')}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                search_results = response.get('search_results', {})
                if search_results:
                    total_hits = search_results.get('total_hits', 0)
                    print(f"Search results: {total_hits} hits")

                    if total_hits > 0:
                        results = search_results.get('results', [])
                        if results:
                            for i, hit in enumerate(results[:3], 1):
                                print(f"  {i}. {hit.get('entity_name', 'N/A')} (confidence: {hit.get('confidence', 0):.3f})")
                        print("üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–µ–Ω!")
                        return True
                    else:
                        print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        return False
                else:
                    print("‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                    return False

            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"Raw response: {result.stdout}")
                return False

        else:
            print(f"‚ùå Curl failed: {result.stderr}")
            return False

    except subprocess.TimeoutExpired:
        print("‚ùå Timeout - API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ curl: {e}")
        return False

def main():
    print("üéØ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ü–†–û–¶–ï–°–°–ê: –ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ")
    print("=" * 50)

    tests = [
        ("AC –ü–∞—Ç—Ç–µ—Ä–Ω—ã", test_poroshenko_ac_patterns),
        ("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è", test_poroshenko_normalization),
        ("SmartFilter", test_poroshenko_smartfilter),
        ("–ü–æ–ª–Ω—ã–π API –ø—Ä–æ—Ü–µ—Å—Å", test_poroshenko_full_process)
    ]

    passed = 0
    total = len(tests)

    for name, test_func in tests:
        print(f"\n=== {name} ===")
        if test_func():
            passed += 1
            print(f"‚úÖ {name} - –£–°–ü–ï–•")
        else:
            print(f"‚ùå {name} - –û–®–ò–ë–ö–ê")

    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

    if passed == total:
        print("üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢! –ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)