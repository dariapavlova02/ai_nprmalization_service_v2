#!/usr/bin/env python3

"""
–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è metrics –≤ _handle_name_normalization_layer.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_normalization_layer_metrics():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è metrics –≤ —Å–ª–æ–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø METRICS –í –°–õ–û–ï –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 60)

    try:
        from ai_service.layers.normalization.normalization_service import NormalizationService

        print("‚úÖ NormalizationService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        service = NormalizationService()
        print("‚úÖ NormalizationService —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
        test_text = "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á"
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é: '{test_text}'")

        result = service.normalize(
            text=test_text,
            language="uk",
            remove_stop_words=True,
            preserve_names=True,
            enable_advanced_features=True  # –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        )

        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print(f"   Success: {result.success}")
        print(f"   Normalized: '{result.normalized}'")
        print(f"   Tokens: {result.tokens}")
        print(f"   Language: {result.language}")
        print(f"   Processing time: {result.processing_time}s")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ metrics –æ—à–∏–±–∫–∏
        if result.errors:
            for error in result.errors:
                if "metrics" in str(error).lower() and "not defined" in str(error).lower():
                    print(f"‚ùå METRICS –û–®–ò–ë–ö–ê –ù–ê–ô–î–ï–ù–ê: {error}")
                    return False
                else:
                    print(f"‚ÑπÔ∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ metrics): {error}")

        if result.success and result.normalized:
            print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –±–µ–∑ metrics –æ—à–∏–±–æ–∫!")
            return True
        else:
            print(f"‚ö†Ô∏è –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—à–Ω–∞, –Ω–æ metrics –æ—à–∏–±–æ–∫ –Ω–µ—Ç")
            return True

    except NameError as e:
        if "metrics" in str(e) and "not defined" in str(e):
            print(f"‚ùå METRICS NAMEERROR –í–°–ï –ï–©–ï –ï–°–¢–¨: {e}")
            import traceback
            traceback.print_exc()
            return False
        else:
            print(f"‚ÑπÔ∏è –î—Ä—É–≥–∞—è NameError: {e}")
            return True

    except Exception as e:
        if "metrics" in str(e).lower() and "not defined" in str(e).lower():
            print(f"‚ùå METRICS –û–®–ò–ë–ö–ê –í–°–ï –ï–©–ï –ï–°–¢–¨: {e}")
            import traceback
            traceback.print_exc()
            return False
        else:
            print(f"‚ÑπÔ∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")
            return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø METRICS –í –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 50)

    success = test_normalization_layer_metrics()

    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCCESS: Metrics –æ—à–∏–±–∫–∞ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print("   –¢–µ–ø–µ—Ä—å —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ 'metrics' is not defined")
    else:
        print("‚ùå FAILURE: Metrics –æ—à–∏–±–∫–∞ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å.")

    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)