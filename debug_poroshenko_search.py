#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ
"""
import sys
sys.path.insert(0, 'src')

import requests
from requests.auth import HTTPBasicAuth

def debug_poroshenko_search():
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ AC –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ü–æ—Ä–æ—à–µ–Ω–∫–æ...")

    # ES –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    ES_HOST = "95.217.84.234"
    ES_PORT = 9200
    ES_USER = "elastic"
    ES_PASSWORD = "AiServiceElastic2024!"
    ES_INDEX = "ai_service_ac_patterns"

    url = f"http://{ES_HOST}:{ES_PORT}/{ES_INDEX}/_search"
    auth = HTTPBasicAuth(ES_USER, ES_PASSWORD)

    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    test_queries = [
        "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ",
        "–ø–µ—Ç—Ä–æ –ø–æ—Ä–æ—à–µ–Ω–∫–æ",
        "–ü–ï–¢–†–û –ü–û–†–û–®–ï–ù–ö–û",
        "–ü–æ—Ä–æ—à–µ–Ω–∫–æ –ü–µ—Ç—Ä–æ",
        "–ø–æ—Ä–æ—à–µ–Ω–∫–æ –ø–µ—Ç—Ä–æ",
        "–ø–æ—Ä–æ—à–µ–Ω–∫–æ",
        "–ø–µ—Ç—Ä–æ"
    ]

    for query in test_queries:
        print(f"\n--- –ü–æ–∏—Å–∫: '{query}' ---")

        # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            from ai_service.layers.unicode.unicode_service import UnicodeService
            unicode_service = UnicodeService()
            normalized_result = unicode_service.normalize_text(query, normalize_homoglyphs=True)
            normalized = normalized_result["normalized"]
            print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: '{normalized}'")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            normalized = query.lower()

        # –ü–æ–∏—Å–∫ wildcard
        search_query = {
            "query": {
                "wildcard": {
                    "pattern": {
                        "value": f"*{normalized.lower()}*",
                        "case_insensitive": True
                    }
                }
            },
            "size": 5
        }

        try:
            response = requests.post(url, json=search_query, auth=auth)
            if response.status_code == 200:
                result = response.json()
                total_hits = result["hits"]["total"]["value"]
                print(f"Wildcard —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {total_hits}")

                if total_hits > 0:
                    for hit in result["hits"]["hits"][:3]:
                        pattern = hit["_source"]
                        print(f"  - '{pattern['pattern']}'")
            else:
                print(f"–û—à–∏–±–∫–∞ wildcard –ø–æ–∏—Å–∫–∞: {response.status_code}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ wildcard: {e}")

        # –ü–æ–∏—Å–∫ match
        match_query = {
            "query": {
                "match": {
                    "pattern": {
                        "query": normalized,
                        "fuzziness": "AUTO"
                    }
                }
            },
            "size": 5
        }

        try:
            response = requests.post(url, json=match_query, auth=auth)
            if response.status_code == 200:
                result = response.json()
                total_hits = result["hits"]["total"]["value"]
                print(f"Match —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {total_hits}")

                if total_hits > 0:
                    for hit in result["hits"]["hits"][:3]:
                        pattern = hit["_source"]
                        print(f"  - '{pattern['pattern']}'")
            else:
                print(f"–û—à–∏–±–∫–∞ match –ø–æ–∏—Å–∫–∞: {response.status_code}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ match: {e}")

def debug_smartfilter_search():
    print("\nüîç –û—Ç–ª–∞–¥–∫–∞ SmartFilter AC –ø–æ–∏—Å–∫–∞...")

    try:
        from ai_service.layers.smart_filter.smart_filter_service import SmartFilterService

        smart_filter = SmartFilterService(
            language_service=None,
            signal_service=None,
            enable_terrorism_detection=True,
            enable_aho_corasick=True
        )

        test_texts = [
            "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ",
            "–ü–æ—Ä–æ—à–µ–Ω–∫–æ –ü–µ—Ç—Ä–æ",
            "–ø–µ—Ç—Ä–æ –ø–æ—Ä–æ—à–µ–Ω–∫–æ",
            "–ø–æ—Ä–æ—à–µ–Ω–∫–æ –ø–µ—Ç—Ä–æ –æ–ª–µ–∫—Å—ñ–π–æ–≤–∏—á"
        ]

        for text in test_texts:
            print(f"\n--- SmartFilter —Ç–µ—Å—Ç: '{text}' ---")

            ac_result = smart_filter.search_aho_corasick(text)
            print(f"AC —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {ac_result.get('total_matches', 0)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            print(f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {ac_result.get('query_time_ms', 0)}ms")

            if ac_result.get('total_matches', 0) > 0:
                matches = ac_result.get('matches', [])
                for match in matches[:3]:
                    print(f"  - {match}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ SmartFilter: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_poroshenko_search()
    debug_smartfilter_search()